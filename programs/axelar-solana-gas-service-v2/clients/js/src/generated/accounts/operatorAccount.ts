/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const OPERATOR_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  65, 8, 134, 32, 87, 254, 91, 212,
]);

export function getOperatorAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPERATOR_ACCOUNT_DISCRIMINATOR
  );
}

export type OperatorAccount = {
  discriminator: ReadonlyUint8Array;
  /** The operator's pubkey */
  operator: Address;
  /** Bump seed */
  bump: number;
};

export type OperatorAccountArgs = {
  /** The operator's pubkey */
  operator: Address;
  /** Bump seed */
  bump: number;
};

export function getOperatorAccountEncoder(): FixedSizeEncoder<OperatorAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['operator', getAddressEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: OPERATOR_ACCOUNT_DISCRIMINATOR })
  );
}

export function getOperatorAccountDecoder(): FixedSizeDecoder<OperatorAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['operator', getAddressDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getOperatorAccountCodec(): FixedSizeCodec<
  OperatorAccountArgs,
  OperatorAccount
> {
  return combineCodec(getOperatorAccountEncoder(), getOperatorAccountDecoder());
}

export function decodeOperatorAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<OperatorAccount, TAddress>;
export function decodeOperatorAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<OperatorAccount, TAddress>;
export function decodeOperatorAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<OperatorAccount, TAddress>
  | MaybeAccount<OperatorAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOperatorAccountDecoder()
  );
}

export async function fetchOperatorAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<OperatorAccount, TAddress>> {
  const maybeAccount = await fetchMaybeOperatorAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOperatorAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<OperatorAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOperatorAccount(maybeAccount);
}

export async function fetchAllOperatorAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<OperatorAccount>[]> {
  const maybeAccounts = await fetchAllMaybeOperatorAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOperatorAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<OperatorAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeOperatorAccount(maybeAccount)
  );
}

export function getOperatorAccountSize(): number {
  return 41;
}
