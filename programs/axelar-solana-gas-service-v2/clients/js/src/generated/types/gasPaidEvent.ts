/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';

/** Represents the event emitted when gas is paid for a contract call. */
export type GasPaidEvent = {
  /** The sender/payer of gas */
  sender: Address;
  /** Destination chain on the Axelar network */
  destinationChain: string;
  /** Destination address on the Axelar network */
  destinationAddress: string;
  /** The payload hash for the event we're paying for */
  payloadHash: ReadonlyUint8Array;
  /** The amount of SOL paid */
  amount: bigint;
  /** The refund address */
  refundAddress: Address;
  /** Optional SPL token account (sender) */
  splTokenAccount: Option<Address>;
};

export type GasPaidEventArgs = {
  /** The sender/payer of gas */
  sender: Address;
  /** Destination chain on the Axelar network */
  destinationChain: string;
  /** Destination address on the Axelar network */
  destinationAddress: string;
  /** The payload hash for the event we're paying for */
  payloadHash: ReadonlyUint8Array;
  /** The amount of SOL paid */
  amount: number | bigint;
  /** The refund address */
  refundAddress: Address;
  /** Optional SPL token account (sender) */
  splTokenAccount: OptionOrNullable<Address>;
};

export function getGasPaidEventEncoder(): Encoder<GasPaidEventArgs> {
  return getStructEncoder([
    ['sender', getAddressEncoder()],
    [
      'destinationChain',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    [
      'destinationAddress',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
    ['amount', getU64Encoder()],
    ['refundAddress', getAddressEncoder()],
    ['splTokenAccount', getOptionEncoder(getAddressEncoder())],
  ]);
}

export function getGasPaidEventDecoder(): Decoder<GasPaidEvent> {
  return getStructDecoder([
    ['sender', getAddressDecoder()],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['amount', getU64Decoder()],
    ['refundAddress', getAddressDecoder()],
    ['splTokenAccount', getOptionDecoder(getAddressDecoder())],
  ]);
}

export function getGasPaidEventCodec(): Codec<GasPaidEventArgs, GasPaidEvent> {
  return combineCodec(getGasPaidEventEncoder(), getGasPaidEventDecoder());
}
