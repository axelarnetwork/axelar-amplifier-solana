/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedAddGasInstruction,
  type ParsedCollectFeesInstruction,
  type ParsedInitializeInstruction,
  type ParsedPayGasInstruction,
  type ParsedRefundFeesInstruction,
} from '../instructions';

export const AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS =
  'gasd4em72NAm7faq5dvjN5GkXE59dUkTThWmYDX95bK' as Address<'gasd4em72NAm7faq5dvjN5GkXE59dUkTThWmYDX95bK'>;

export enum AxelarSolanaGasServiceV2Account {
  OperatorAccount,
  Treasury,
}

export function identifyAxelarSolanaGasServiceV2Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGasServiceV2Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 8, 134, 32, 87, 254, 91, 212])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Account.OperatorAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([238, 239, 123, 238, 89, 1, 168, 253])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Account.Treasury;
  }
  throw new Error(
    'The provided account could not be identified as a axelarSolanaGasServiceV2 account.'
  );
}

export enum AxelarSolanaGasServiceV2Instruction {
  AddGas,
  CollectFees,
  Initialize,
  PayGas,
  RefundFees,
}

export function identifyAxelarSolanaGasServiceV2Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGasServiceV2Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([102, 60, 200, 164, 148, 40, 230, 206])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Instruction.AddGas;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([164, 152, 207, 99, 30, 186, 19, 182])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Instruction.CollectFees;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Instruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([78, 140, 174, 8, 188, 232, 239, 3])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Instruction.PayGas;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([130, 234, 10, 29, 38, 137, 18, 5])
      ),
      0
    )
  ) {
    return AxelarSolanaGasServiceV2Instruction.RefundFees;
  }
  throw new Error(
    'The provided instruction could not be identified as a axelarSolanaGasServiceV2 instruction.'
  );
}

export type ParsedAxelarSolanaGasServiceV2Instruction<
  TProgram extends string = 'gasd4em72NAm7faq5dvjN5GkXE59dUkTThWmYDX95bK',
> =
  | ({
      instructionType: AxelarSolanaGasServiceV2Instruction.AddGas;
    } & ParsedAddGasInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGasServiceV2Instruction.CollectFees;
    } & ParsedCollectFeesInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGasServiceV2Instruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGasServiceV2Instruction.PayGas;
    } & ParsedPayGasInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGasServiceV2Instruction.RefundFees;
    } & ParsedRefundFeesInstruction<TProgram>);
