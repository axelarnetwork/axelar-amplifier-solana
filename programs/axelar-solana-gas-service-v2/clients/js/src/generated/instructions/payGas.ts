/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const PAY_GAS_DISCRIMINATOR = new Uint8Array([
  78, 140, 174, 8, 188, 232, 239, 3,
]);

export function getPayGasDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PAY_GAS_DISCRIMINATOR);
}

export type PayGasInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS,
  TAccountSender extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSender extends string
        ? WritableSignerAccount<TAccountSender> &
            AccountSignerMeta<TAccountSender>
        : TAccountSender,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type PayGasInstructionData = {
  discriminator: ReadonlyUint8Array;
  destinationChain: string;
  destinationAddress: string;
  payloadHash: ReadonlyUint8Array;
  amount: bigint;
  refundAddress: Address;
};

export type PayGasInstructionDataArgs = {
  destinationChain: string;
  destinationAddress: string;
  payloadHash: ReadonlyUint8Array;
  amount: number | bigint;
  refundAddress: Address;
};

export function getPayGasInstructionDataEncoder(): Encoder<PayGasInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'destinationChain',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'destinationAddress',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['amount', getU64Encoder()],
      ['refundAddress', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PAY_GAS_DISCRIMINATOR })
  );
}

export function getPayGasInstructionDataDecoder(): Decoder<PayGasInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['amount', getU64Decoder()],
    ['refundAddress', getAddressDecoder()],
  ]);
}

export function getPayGasInstructionDataCodec(): Codec<
  PayGasInstructionDataArgs,
  PayGasInstructionData
> {
  return combineCodec(
    getPayGasInstructionDataEncoder(),
    getPayGasInstructionDataDecoder()
  );
}

export type PayGasAsyncInput<
  TAccountSender extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  sender: TransactionSigner<TAccountSender>;
  treasury?: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  destinationChain: PayGasInstructionDataArgs['destinationChain'];
  destinationAddress: PayGasInstructionDataArgs['destinationAddress'];
  payloadHash: PayGasInstructionDataArgs['payloadHash'];
  amount: PayGasInstructionDataArgs['amount'];
  refundAddress: PayGasInstructionDataArgs['refundAddress'];
};

export async function getPayGasInstructionAsync<
  TAccountSender extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS,
>(
  input: PayGasAsyncInput<
    TAccountSender,
    TAccountTreasury,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  PayGasInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountTreasury,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sender: { value: input.sender ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.treasury.value) {
    accounts.treasury.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 115, 45, 115, 101, 114, 118, 105, 99, 101])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getPayGasInstructionDataEncoder().encode(
      args as PayGasInstructionDataArgs
    ),
    programAddress,
  } as PayGasInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountTreasury,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type PayGasInput<
  TAccountSender extends string = string,
  TAccountTreasury extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  sender: TransactionSigner<TAccountSender>;
  treasury: Address<TAccountTreasury>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  destinationChain: PayGasInstructionDataArgs['destinationChain'];
  destinationAddress: PayGasInstructionDataArgs['destinationAddress'];
  payloadHash: PayGasInstructionDataArgs['payloadHash'];
  amount: PayGasInstructionDataArgs['amount'];
  refundAddress: PayGasInstructionDataArgs['refundAddress'];
};

export function getPayGasInstruction<
  TAccountSender extends string,
  TAccountTreasury extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS,
>(
  input: PayGasInput<
    TAccountSender,
    TAccountTreasury,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): PayGasInstruction<
  TProgramAddress,
  TAccountSender,
  TAccountTreasury,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    sender: { value: input.sender ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.sender),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getPayGasInstructionDataEncoder().encode(
      args as PayGasInstructionDataArgs
    ),
    programAddress,
  } as PayGasInstruction<
    TProgramAddress,
    TAccountSender,
    TAccountTreasury,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedPayGasInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GAS_SERVICE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    sender: TAccountMetas[0];
    treasury: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: PayGasInstructionData;
};

export function parsePayGasInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedPayGasInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      sender: getNextAccount(),
      treasury: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getPayGasInstructionDataDecoder().decode(instruction.data),
  };
}
