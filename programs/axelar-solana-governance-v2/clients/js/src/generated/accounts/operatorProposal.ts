/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const OPERATOR_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  55, 174, 78, 112, 33, 32, 159, 169,
]);

export function getOperatorProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    OPERATOR_PROPOSAL_DISCRIMINATOR
  );
}

export type OperatorProposal = { discriminator: ReadonlyUint8Array };

export type OperatorProposalArgs = {};

export function getOperatorProposalEncoder(): FixedSizeEncoder<OperatorProposalArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: OPERATOR_PROPOSAL_DISCRIMINATOR })
  );
}

export function getOperatorProposalDecoder(): FixedSizeDecoder<OperatorProposal> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getOperatorProposalCodec(): FixedSizeCodec<
  OperatorProposalArgs,
  OperatorProposal
> {
  return combineCodec(
    getOperatorProposalEncoder(),
    getOperatorProposalDecoder()
  );
}

export function decodeOperatorProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<OperatorProposal, TAddress>;
export function decodeOperatorProposal<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<OperatorProposal, TAddress>;
export function decodeOperatorProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<OperatorProposal, TAddress>
  | MaybeAccount<OperatorProposal, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getOperatorProposalDecoder()
  );
}

export async function fetchOperatorProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<OperatorProposal, TAddress>> {
  const maybeAccount = await fetchMaybeOperatorProposal(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeOperatorProposal<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<OperatorProposal, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeOperatorProposal(maybeAccount);
}

export async function fetchAllOperatorProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<OperatorProposal>[]> {
  const maybeAccounts = await fetchAllMaybeOperatorProposal(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeOperatorProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<OperatorProposal>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeOperatorProposal(maybeAccount)
  );
}

export function getOperatorProposalSize(): number {
  return 8;
}
