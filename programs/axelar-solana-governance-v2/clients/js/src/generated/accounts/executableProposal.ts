/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const EXECUTABLE_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  152, 137, 76, 47, 208, 180, 97, 183,
]);

export function getExecutableProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTABLE_PROPOSAL_DISCRIMINATOR
  );
}

export type ExecutableProposal = {
  discriminator: ReadonlyUint8Array;
  /**
   * Represent the le bytes containing unix timestamp from when the proposal
   * can be executed.
   */
  eta: bigint;
  /** The bump seed for the proposal PDA. */
  bump: number;
  /** The bump seed for the operator managed proposal PDA. */
  managedBump: number;
};

export type ExecutableProposalArgs = {
  /**
   * Represent the le bytes containing unix timestamp from when the proposal
   * can be executed.
   */
  eta: number | bigint;
  /** The bump seed for the proposal PDA. */
  bump: number;
  /** The bump seed for the operator managed proposal PDA. */
  managedBump: number;
};

export function getExecutableProposalEncoder(): FixedSizeEncoder<ExecutableProposalArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['eta', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['managedBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: EXECUTABLE_PROPOSAL_DISCRIMINATOR })
  );
}

export function getExecutableProposalDecoder(): FixedSizeDecoder<ExecutableProposal> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['eta', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['managedBump', getU8Decoder()],
  ]);
}

export function getExecutableProposalCodec(): FixedSizeCodec<
  ExecutableProposalArgs,
  ExecutableProposal
> {
  return combineCodec(
    getExecutableProposalEncoder(),
    getExecutableProposalDecoder()
  );
}

export function decodeExecutableProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ExecutableProposal, TAddress>;
export function decodeExecutableProposal<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ExecutableProposal, TAddress>;
export function decodeExecutableProposal<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ExecutableProposal, TAddress>
  | MaybeAccount<ExecutableProposal, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getExecutableProposalDecoder()
  );
}

export async function fetchExecutableProposal<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ExecutableProposal, TAddress>> {
  const maybeAccount = await fetchMaybeExecutableProposal(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeExecutableProposal<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ExecutableProposal, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeExecutableProposal(maybeAccount);
}

export async function fetchAllExecutableProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ExecutableProposal>[]> {
  const maybeAccounts = await fetchAllMaybeExecutableProposal(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeExecutableProposal(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ExecutableProposal>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeExecutableProposal(maybeAccount)
  );
}

export function getExecutableProposalSize(): number {
  return 18;
}
