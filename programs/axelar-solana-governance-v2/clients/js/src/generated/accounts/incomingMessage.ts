/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getMessageStatusDecoder,
  getMessageStatusEncoder,
  type MessageStatus,
  type MessageStatusArgs,
} from '../types';

export const INCOMING_MESSAGE_DISCRIMINATOR = new Uint8Array([
  30, 144, 125, 111, 211, 223, 91, 170,
]);

export function getIncomingMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INCOMING_MESSAGE_DISCRIMINATOR
  );
}

export type IncomingMessage = {
  discriminator: ReadonlyUint8Array;
  bump: number;
  signingPdaBump: number;
  pad: ReadonlyUint8Array;
  status: MessageStatus;
  messageHash: ReadonlyUint8Array;
  payloadHash: ReadonlyUint8Array;
};

export type IncomingMessageArgs = {
  bump: number;
  signingPdaBump: number;
  pad: ReadonlyUint8Array;
  status: MessageStatusArgs;
  messageHash: ReadonlyUint8Array;
  payloadHash: ReadonlyUint8Array;
};

export function getIncomingMessageEncoder(): FixedSizeEncoder<IncomingMessageArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['signingPdaBump', getU8Encoder()],
      ['pad', fixEncoderSize(getBytesEncoder(), 3)],
      ['status', getMessageStatusEncoder()],
      ['messageHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: INCOMING_MESSAGE_DISCRIMINATOR })
  );
}

export function getIncomingMessageDecoder(): FixedSizeDecoder<IncomingMessage> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['signingPdaBump', getU8Decoder()],
    ['pad', fixDecoderSize(getBytesDecoder(), 3)],
    ['status', getMessageStatusDecoder()],
    ['messageHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getIncomingMessageCodec(): FixedSizeCodec<
  IncomingMessageArgs,
  IncomingMessage
> {
  return combineCodec(getIncomingMessageEncoder(), getIncomingMessageDecoder());
}

export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<IncomingMessage, TAddress>;
export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<IncomingMessage, TAddress>;
export function decodeIncomingMessage<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<IncomingMessage, TAddress>
  | MaybeAccount<IncomingMessage, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getIncomingMessageDecoder()
  );
}

export async function fetchIncomingMessage<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<IncomingMessage, TAddress>> {
  const maybeAccount = await fetchMaybeIncomingMessage(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeIncomingMessage<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<IncomingMessage, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeIncomingMessage(maybeAccount);
}

export async function fetchAllIncomingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<IncomingMessage>[]> {
  const maybeAccounts = await fetchAllMaybeIncomingMessage(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeIncomingMessage(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<IncomingMessage>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeIncomingMessage(maybeAccount)
  );
}

export function getIncomingMessageSize(): number {
  return 78;
}
