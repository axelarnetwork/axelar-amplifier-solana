/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';

/** InvalidUpgradeAuthority:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_UPGRADE_AUTHORITY = 0x1770; // 6000
/** InvalidArgument:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_ARGUMENT = 0x1771; // 6001
/** NotOperator:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__NOT_OPERATOR = 0x1772; // 6002
/** InvalidPayloadHash:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_PAYLOAD_HASH = 0x1773; // 6003
/** ArithmeticOverflow:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__ARITHMETIC_OVERFLOW = 0x1774; // 6004
/** UnauthorizedChain:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_CHAIN = 0x1775; // 6005
/** UnauthorizedAddress:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_ADDRESS = 0x1776; // 6006
/** InvalidInstructionData:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_INSTRUCTION_DATA = 0x1777; // 6007
/** ProposalNotReady:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__PROPOSAL_NOT_READY = 0x1778; // 6008
/** InvalidTargetProgram:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_TARGET_PROGRAM = 0x1779; // 6009
/** TargetAccountNotFound:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__TARGET_ACCOUNT_NOT_FOUND = 0x177a; // 6010
/** MissingNativeValueReceiver:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_NATIVE_VALUE_RECEIVER = 0x177b; // 6011
/** InvalidNativeValue:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_NATIVE_VALUE = 0x177c; // 6012
/** InsufficientFunds:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INSUFFICIENT_FUNDS = 0x177d; // 6013
/** UnauthorizedOperator:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_OPERATOR = 0x177e; // 6014
/** MissingRequiredSignature:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_REQUIRED_SIGNATURE = 0x177f; // 6015
/** GovernanceConfigMissing:  */
export const AXELAR_SOLANA_GOVERNANCE_V2_ERROR__GOVERNANCE_CONFIG_MISSING = 0x1780; // 6016

export type AxelarSolanaGovernanceV2Error =
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__ARITHMETIC_OVERFLOW
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__GOVERNANCE_CONFIG_MISSING
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INSUFFICIENT_FUNDS
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_ARGUMENT
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_INSTRUCTION_DATA
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_NATIVE_VALUE
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_PAYLOAD_HASH
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_TARGET_PROGRAM
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_UPGRADE_AUTHORITY
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_NATIVE_VALUE_RECEIVER
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_REQUIRED_SIGNATURE
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__NOT_OPERATOR
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__PROPOSAL_NOT_READY
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__TARGET_ACCOUNT_NOT_FOUND
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_ADDRESS
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_CHAIN
  | typeof AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_OPERATOR;

let axelarSolanaGovernanceV2ErrorMessages:
  | Record<AxelarSolanaGovernanceV2Error, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  axelarSolanaGovernanceV2ErrorMessages = {
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__ARITHMETIC_OVERFLOW]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__GOVERNANCE_CONFIG_MISSING]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INSUFFICIENT_FUNDS]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_ARGUMENT]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_INSTRUCTION_DATA]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_NATIVE_VALUE]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_PAYLOAD_HASH]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_TARGET_PROGRAM]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__INVALID_UPGRADE_AUTHORITY]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_NATIVE_VALUE_RECEIVER]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__MISSING_REQUIRED_SIGNATURE]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__NOT_OPERATOR]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__PROPOSAL_NOT_READY]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__TARGET_ACCOUNT_NOT_FOUND]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_ADDRESS]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_CHAIN]: ``,
    [AXELAR_SOLANA_GOVERNANCE_V2_ERROR__UNAUTHORIZED_OPERATOR]: ``,
  };
}

export function getAxelarSolanaGovernanceV2ErrorMessage(
  code: AxelarSolanaGovernanceV2Error
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      axelarSolanaGovernanceV2ErrorMessages as Record<
        AxelarSolanaGovernanceV2Error,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAxelarSolanaGovernanceV2Error<
  TProgramErrorCode extends AxelarSolanaGovernanceV2Error,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
    code
  );
}
