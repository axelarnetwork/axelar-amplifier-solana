/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedApproveOperatorProposalInstruction,
  type ParsedCancelOperatorProposalInstruction,
  type ParsedCancelTimelockProposalInstruction,
  type ParsedExecuteOperatorProposalInstruction,
  type ParsedExecuteTimelockProposalInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedProcessGmpInstruction,
  type ParsedScheduleTimelockProposalInstruction,
  type ParsedTransferOperatorshipInstruction,
  type ParsedUpdateConfigInstruction,
  type ParsedWithdrawTokensInstruction,
} from '../instructions';

export const AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS =
  '8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV' as Address<'8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV'>;

export enum AxelarSolanaGovernanceV2Account {
  ExecutableProposal,
  GatewayConfig,
  GovernanceConfig,
  IncomingMessage,
  OperatorProposal,
}

export function identifyAxelarSolanaGovernanceV2Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGovernanceV2Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([152, 137, 76, 47, 208, 180, 97, 183])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Account.ExecutableProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 247, 66, 27, 24, 1, 48, 176])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Account.GatewayConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([81, 63, 124, 107, 210, 100, 145, 70])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Account.GovernanceConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 144, 125, 111, 211, 223, 91, 170])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Account.IncomingMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([55, 174, 78, 112, 33, 32, 159, 169])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Account.OperatorProposal;
  }
  throw new Error(
    'The provided account could not be identified as a axelarSolanaGovernanceV2 account.'
  );
}

export enum AxelarSolanaGovernanceV2Instruction {
  ApproveOperatorProposal,
  CancelOperatorProposal,
  CancelTimelockProposal,
  ExecuteOperatorProposal,
  ExecuteTimelockProposal,
  InitializeConfig,
  ProcessGmp,
  ScheduleTimelockProposal,
  TransferOperatorship,
  UpdateConfig,
  WithdrawTokens,
}

export function identifyAxelarSolanaGovernanceV2Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGovernanceV2Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([98, 151, 174, 91, 138, 118, 230, 217])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.ApproveOperatorProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([110, 196, 173, 235, 174, 200, 49, 17])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.CancelOperatorProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([185, 181, 227, 240, 86, 14, 208, 229])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.CancelTimelockProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 19, 234, 108, 32, 92, 20, 7])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.ExecuteOperatorProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 249, 55, 12, 179, 30, 238, 220])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.ExecuteTimelockProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([130, 221, 242, 154, 13, 193, 189, 29])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.ProcessGmp;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 169, 88, 51, 224, 70, 0, 119])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.ScheduleTimelockProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 238, 86, 208, 233, 122, 195, 186])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.TransferOperatorship;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([29, 158, 252, 191, 10, 83, 219, 99])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.UpdateConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 4, 225, 61, 19, 182, 106, 170])
      ),
      0
    )
  ) {
    return AxelarSolanaGovernanceV2Instruction.WithdrawTokens;
  }
  throw new Error(
    'The provided instruction could not be identified as a axelarSolanaGovernanceV2 instruction.'
  );
}

export type ParsedAxelarSolanaGovernanceV2Instruction<
  TProgram extends string = '8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV',
> =
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.ApproveOperatorProposal;
    } & ParsedApproveOperatorProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.CancelOperatorProposal;
    } & ParsedCancelOperatorProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.CancelTimelockProposal;
    } & ParsedCancelTimelockProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.ExecuteOperatorProposal;
    } & ParsedExecuteOperatorProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.ExecuteTimelockProposal;
    } & ParsedExecuteTimelockProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.ProcessGmp;
    } & ParsedProcessGmpInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.ScheduleTimelockProposal;
    } & ParsedScheduleTimelockProposalInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.TransferOperatorship;
    } & ParsedTransferOperatorshipInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.UpdateConfig;
    } & ParsedUpdateConfigInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGovernanceV2Instruction.WithdrawTokens;
    } & ParsedWithdrawTokensInstruction<TProgram>);
