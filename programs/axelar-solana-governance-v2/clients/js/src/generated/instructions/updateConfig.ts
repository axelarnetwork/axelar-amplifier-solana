/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_CONFIG_DISCRIMINATOR = new Uint8Array([
  29, 158, 252, 191, 10, 83, 219, 99,
]);

export function getUpdateConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    UPDATE_CONFIG_DISCRIMINATOR
  );
}

export type UpdateConfigInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountGovernanceConfig extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGovernanceConfig extends string
        ? WritableAccount<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  chainHash: Option<ReadonlyUint8Array>;
  addressHash: Option<ReadonlyUint8Array>;
  minimumProposalEtaDelay: Option<number>;
};

export type UpdateConfigInstructionDataArgs = {
  chainHash: OptionOrNullable<ReadonlyUint8Array>;
  addressHash: OptionOrNullable<ReadonlyUint8Array>;
  minimumProposalEtaDelay: OptionOrNullable<number>;
};

export function getUpdateConfigInstructionDataEncoder(): Encoder<UpdateConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['chainHash', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['addressHash', getOptionEncoder(fixEncoderSize(getBytesEncoder(), 32))],
      ['minimumProposalEtaDelay', getOptionEncoder(getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_CONFIG_DISCRIMINATOR })
  );
}

export function getUpdateConfigInstructionDataDecoder(): Decoder<UpdateConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['chainHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['addressHash', getOptionDecoder(fixDecoderSize(getBytesDecoder(), 32))],
    ['minimumProposalEtaDelay', getOptionDecoder(getU32Decoder())],
  ]);
}

export function getUpdateConfigInstructionDataCodec(): Codec<
  UpdateConfigInstructionDataArgs,
  UpdateConfigInstructionData
> {
  return combineCodec(
    getUpdateConfigInstructionDataEncoder(),
    getUpdateConfigInstructionDataDecoder()
  );
}

export type UpdateConfigAsyncInput<
  TAccountPayer extends string = string,
  TAccountGovernanceConfig extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  governanceConfig?: Address<TAccountGovernanceConfig>;
  chainHash: UpdateConfigInstructionDataArgs['chainHash'];
  addressHash: UpdateConfigInstructionDataArgs['addressHash'];
  minimumProposalEtaDelay: UpdateConfigInstructionDataArgs['minimumProposalEtaDelay'];
};

export async function getUpdateConfigInstructionAsync<
  TAccountPayer extends string,
  TAccountGovernanceConfig extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: UpdateConfigAsyncInput<TAccountPayer, TAccountGovernanceConfig>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGovernanceConfig
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.governanceConfig.value) {
    accounts.governanceConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 111, 118, 101, 114, 110, 97, 110, 99, 101])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.governanceConfig),
    ],
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as UpdateConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGovernanceConfig
  >);
}

export type UpdateConfigInput<
  TAccountPayer extends string = string,
  TAccountGovernanceConfig extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  governanceConfig: Address<TAccountGovernanceConfig>;
  chainHash: UpdateConfigInstructionDataArgs['chainHash'];
  addressHash: UpdateConfigInstructionDataArgs['addressHash'];
  minimumProposalEtaDelay: UpdateConfigInstructionDataArgs['minimumProposalEtaDelay'];
};

export function getUpdateConfigInstruction<
  TAccountPayer extends string,
  TAccountGovernanceConfig extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: UpdateConfigInput<TAccountPayer, TAccountGovernanceConfig>,
  config?: { programAddress?: TProgramAddress }
): UpdateConfigInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountGovernanceConfig
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.governanceConfig),
    ],
    data: getUpdateConfigInstructionDataEncoder().encode(
      args as UpdateConfigInstructionDataArgs
    ),
    programAddress,
  } as UpdateConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGovernanceConfig
  >);
}

export type ParsedUpdateConfigInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    governanceConfig: TAccountMetas[1];
  };
  data: UpdateConfigInstructionData;
};

export function parseUpdateConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { payer: getNextAccount(), governanceConfig: getNextAccount() },
    data: getUpdateConfigInstructionDataDecoder().decode(instruction.data),
  };
}
