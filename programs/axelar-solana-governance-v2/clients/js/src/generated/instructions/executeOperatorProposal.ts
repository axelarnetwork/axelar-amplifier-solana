/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getExecuteProposalDataDecoder,
  getExecuteProposalDataEncoder,
  type ExecuteProposalData,
  type ExecuteProposalDataArgs,
} from '../types';

export const EXECUTE_OPERATOR_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  122, 19, 234, 108, 32, 92, 20, 7,
]);

export function getExecuteOperatorProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_OPERATOR_PROPOSAL_DISCRIMINATOR
  );
}

export type ExecuteOperatorProposalInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountGovernanceConfig extends string | AccountMeta<string> = string,
  TAccountProposalPda extends string | AccountMeta<string> = string,
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountOperatorPdaMarkerAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGovernanceConfig extends string
        ? WritableAccount<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      TAccountProposalPda extends string
        ? WritableAccount<TAccountProposalPda>
        : TAccountProposalPda,
      TAccountOperator extends string
        ? ReadonlySignerAccount<TAccountOperator> &
            AccountSignerMeta<TAccountOperator>
        : TAccountOperator,
      TAccountOperatorPdaMarkerAccount extends string
        ? WritableAccount<TAccountOperatorPdaMarkerAccount>
        : TAccountOperatorPdaMarkerAccount,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteOperatorProposalInstructionData = {
  discriminator: ReadonlyUint8Array;
  executeProposalData: ExecuteProposalData;
};

export type ExecuteOperatorProposalInstructionDataArgs = {
  executeProposalData: ExecuteProposalDataArgs;
};

export function getExecuteOperatorProposalInstructionDataEncoder(): Encoder<ExecuteOperatorProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['executeProposalData', getExecuteProposalDataEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_OPERATOR_PROPOSAL_DISCRIMINATOR,
    })
  );
}

export function getExecuteOperatorProposalInstructionDataDecoder(): Decoder<ExecuteOperatorProposalInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['executeProposalData', getExecuteProposalDataDecoder()],
  ]);
}

export function getExecuteOperatorProposalInstructionDataCodec(): Codec<
  ExecuteOperatorProposalInstructionDataArgs,
  ExecuteOperatorProposalInstructionData
> {
  return combineCodec(
    getExecuteOperatorProposalInstructionDataEncoder(),
    getExecuteOperatorProposalInstructionDataDecoder()
  );
}

export type ExecuteOperatorProposalAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountProposalPda extends string = string,
  TAccountOperator extends string = string,
  TAccountOperatorPdaMarkerAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  governanceConfig?: Address<TAccountGovernanceConfig>;
  proposalPda: Address<TAccountProposalPda>;
  /** The operator account that must sign this transaction */
  operator: TransactionSigner<TAccountOperator>;
  operatorPdaMarkerAccount: Address<TAccountOperatorPdaMarkerAccount>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  executeProposalData: ExecuteOperatorProposalInstructionDataArgs['executeProposalData'];
};

export async function getExecuteOperatorProposalInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountGovernanceConfig extends string,
  TAccountProposalPda extends string,
  TAccountOperator extends string,
  TAccountOperatorPdaMarkerAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: ExecuteOperatorProposalAsyncInput<
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperator,
    TAccountOperatorPdaMarkerAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ExecuteOperatorProposalInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperator,
    TAccountOperatorPdaMarkerAccount,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    proposalPda: { value: input.proposalPda ?? null, isWritable: true },
    operator: { value: input.operator ?? null, isWritable: false },
    operatorPdaMarkerAccount: {
      value: input.operatorPdaMarkerAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.governanceConfig.value) {
    accounts.governanceConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 111, 118, 101, 114, 110, 97, 110, 99, 101])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.proposalPda),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.operatorPdaMarkerAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getExecuteOperatorProposalInstructionDataEncoder().encode(
      args as ExecuteOperatorProposalInstructionDataArgs
    ),
    programAddress,
  } as ExecuteOperatorProposalInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperator,
    TAccountOperatorPdaMarkerAccount,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ExecuteOperatorProposalInput<
  TAccountSystemProgram extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountProposalPda extends string = string,
  TAccountOperator extends string = string,
  TAccountOperatorPdaMarkerAccount extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  governanceConfig: Address<TAccountGovernanceConfig>;
  proposalPda: Address<TAccountProposalPda>;
  /** The operator account that must sign this transaction */
  operator: TransactionSigner<TAccountOperator>;
  operatorPdaMarkerAccount: Address<TAccountOperatorPdaMarkerAccount>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  executeProposalData: ExecuteOperatorProposalInstructionDataArgs['executeProposalData'];
};

export function getExecuteOperatorProposalInstruction<
  TAccountSystemProgram extends string,
  TAccountGovernanceConfig extends string,
  TAccountProposalPda extends string,
  TAccountOperator extends string,
  TAccountOperatorPdaMarkerAccount extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: ExecuteOperatorProposalInput<
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperator,
    TAccountOperatorPdaMarkerAccount,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteOperatorProposalInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountGovernanceConfig,
  TAccountProposalPda,
  TAccountOperator,
  TAccountOperatorPdaMarkerAccount,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    proposalPda: { value: input.proposalPda ?? null, isWritable: true },
    operator: { value: input.operator ?? null, isWritable: false },
    operatorPdaMarkerAccount: {
      value: input.operatorPdaMarkerAccount ?? null,
      isWritable: true,
    },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.proposalPda),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.operatorPdaMarkerAccount),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getExecuteOperatorProposalInstructionDataEncoder().encode(
      args as ExecuteOperatorProposalInstructionDataArgs
    ),
    programAddress,
  } as ExecuteOperatorProposalInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperator,
    TAccountOperatorPdaMarkerAccount,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedExecuteOperatorProposalInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    governanceConfig: TAccountMetas[1];
    proposalPda: TAccountMetas[2];
    /** The operator account that must sign this transaction */
    operator: TAccountMetas[3];
    operatorPdaMarkerAccount: TAccountMetas[4];
    eventAuthority: TAccountMetas[5];
    program: TAccountMetas[6];
  };
  data: ExecuteOperatorProposalInstructionData;
};

export function parseExecuteOperatorProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteOperatorProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      governanceConfig: getNextAccount(),
      proposalPda: getNextAccount(),
      operator: getNextAccount(),
      operatorPdaMarkerAccount: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getExecuteOperatorProposalInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
