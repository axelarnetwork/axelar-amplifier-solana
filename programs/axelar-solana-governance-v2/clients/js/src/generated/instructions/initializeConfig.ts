/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_CONFIG_DISCRIMINATOR = new Uint8Array([
  208, 127, 21, 1, 194, 190, 196, 70,
]);

export function getInitializeConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_CONFIG_DISCRIMINATOR
  );
}

export type InitializeConfigInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountUpgradeAuthority extends string | AccountMeta<string> = string,
  TAccountProgramData extends string | AccountMeta<string> = string,
  TAccountGovernanceConfig extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUpgradeAuthority extends string
        ? ReadonlySignerAccount<TAccountUpgradeAuthority> &
            AccountSignerMeta<TAccountUpgradeAuthority>
        : TAccountUpgradeAuthority,
      TAccountProgramData extends string
        ? ReadonlyAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountGovernanceConfig extends string
        ? WritableAccount<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  chainHash: ReadonlyUint8Array;
  addressHash: ReadonlyUint8Array;
  minimumProposalEtaDelay: number;
  operator: ReadonlyUint8Array;
};

export type InitializeConfigInstructionDataArgs = {
  chainHash: ReadonlyUint8Array;
  addressHash: ReadonlyUint8Array;
  minimumProposalEtaDelay: number;
  operator: ReadonlyUint8Array;
};

export function getInitializeConfigInstructionDataEncoder(): FixedSizeEncoder<InitializeConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['chainHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['addressHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['minimumProposalEtaDelay', getU32Encoder()],
      ['operator', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: INITIALIZE_CONFIG_DISCRIMINATOR })
  );
}

export function getInitializeConfigInstructionDataDecoder(): FixedSizeDecoder<InitializeConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['chainHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['addressHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['minimumProposalEtaDelay', getU32Decoder()],
    ['operator', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getInitializeConfigInstructionDataCodec(): FixedSizeCodec<
  InitializeConfigInstructionDataArgs,
  InitializeConfigInstructionData
> {
  return combineCodec(
    getInitializeConfigInstructionDataEncoder(),
    getInitializeConfigInstructionDataDecoder()
  );
}

export type InitializeConfigAsyncInput<
  TAccountPayer extends string = string,
  TAccountUpgradeAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  upgradeAuthority: TransactionSigner<TAccountUpgradeAuthority>;
  programData?: Address<TAccountProgramData>;
  governanceConfig?: Address<TAccountGovernanceConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  chainHash: InitializeConfigInstructionDataArgs['chainHash'];
  addressHash: InitializeConfigInstructionDataArgs['addressHash'];
  minimumProposalEtaDelay: InitializeConfigInstructionDataArgs['minimumProposalEtaDelay'];
  operator: InitializeConfigInstructionDataArgs['operator'];
};

export async function getInitializeConfigInstructionAsync<
  TAccountPayer extends string,
  TAccountUpgradeAuthority extends string,
  TAccountProgramData extends string,
  TAccountGovernanceConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: InitializeConfigAsyncInput<
    TAccountPayer,
    TAccountUpgradeAuthority,
    TAccountProgramData,
    TAccountGovernanceConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountUpgradeAuthority,
    TAccountProgramData,
    TAccountGovernanceConfig,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    upgradeAuthority: {
      value: input.upgradeAuthority ?? null,
      isWritable: false,
    },
    programData: { value: input.programData ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programData.value) {
    accounts.programData.value = await getProgramDerivedAddress({
      programAddress:
        'BPFLoaderUpgradeab1e11111111111111111111111' as Address<'BPFLoaderUpgradeab1e11111111111111111111111'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            116, 242, 187, 73, 188, 204, 158, 255, 97, 18, 94, 69, 37, 212, 132,
            253, 11, 93, 160, 71, 136, 56, 75, 204, 233, 117, 25, 12, 101, 96,
            53, 230,
          ])
        ),
      ],
    });
  }
  if (!accounts.governanceConfig.value) {
    accounts.governanceConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 111, 118, 101, 114, 110, 97, 110, 99, 101])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.upgradeAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeConfigInstructionDataEncoder().encode(
      args as InitializeConfigInstructionDataArgs
    ),
    programAddress,
  } as InitializeConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountUpgradeAuthority,
    TAccountProgramData,
    TAccountGovernanceConfig,
    TAccountSystemProgram
  >);
}

export type InitializeConfigInput<
  TAccountPayer extends string = string,
  TAccountUpgradeAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  upgradeAuthority: TransactionSigner<TAccountUpgradeAuthority>;
  programData: Address<TAccountProgramData>;
  governanceConfig: Address<TAccountGovernanceConfig>;
  systemProgram?: Address<TAccountSystemProgram>;
  chainHash: InitializeConfigInstructionDataArgs['chainHash'];
  addressHash: InitializeConfigInstructionDataArgs['addressHash'];
  minimumProposalEtaDelay: InitializeConfigInstructionDataArgs['minimumProposalEtaDelay'];
  operator: InitializeConfigInstructionDataArgs['operator'];
};

export function getInitializeConfigInstruction<
  TAccountPayer extends string,
  TAccountUpgradeAuthority extends string,
  TAccountProgramData extends string,
  TAccountGovernanceConfig extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: InitializeConfigInput<
    TAccountPayer,
    TAccountUpgradeAuthority,
    TAccountProgramData,
    TAccountGovernanceConfig,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeConfigInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountUpgradeAuthority,
  TAccountProgramData,
  TAccountGovernanceConfig,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    upgradeAuthority: {
      value: input.upgradeAuthority ?? null,
      isWritable: false,
    },
    programData: { value: input.programData ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.upgradeAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeConfigInstructionDataEncoder().encode(
      args as InitializeConfigInstructionDataArgs
    ),
    programAddress,
  } as InitializeConfigInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountUpgradeAuthority,
    TAccountProgramData,
    TAccountGovernanceConfig,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeConfigInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    upgradeAuthority: TAccountMetas[1];
    programData: TAccountMetas[2];
    governanceConfig: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializeConfigInstructionData;
};

export function parseInitializeConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      upgradeAuthority: getNextAccount(),
      programData: getNextAccount(),
      governanceConfig: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeConfigInstructionDataDecoder().decode(instruction.data),
  };
}
