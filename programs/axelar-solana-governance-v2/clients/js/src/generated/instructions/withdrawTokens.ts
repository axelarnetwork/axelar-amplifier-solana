/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const WITHDRAW_TOKENS_DISCRIMINATOR = new Uint8Array([
  2, 4, 225, 61, 19, 182, 106, 170,
]);

export function getWithdrawTokensDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    WITHDRAW_TOKENS_DISCRIMINATOR
  );
}

export type WithdrawTokensInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountGovernanceConfig extends string | AccountMeta<string> = string,
  TAccountReceiver extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountGovernanceConfig extends string
        ? WritableSignerAccount<TAccountGovernanceConfig> &
            AccountSignerMeta<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      TAccountReceiver extends string
        ? WritableAccount<TAccountReceiver>
        : TAccountReceiver,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawTokensInstructionData = {
  discriminator: ReadonlyUint8Array;
  amount: bigint;
};

export type WithdrawTokensInstructionDataArgs = { amount: number | bigint };

export function getWithdrawTokensInstructionDataEncoder(): FixedSizeEncoder<WithdrawTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['amount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: WITHDRAW_TOKENS_DISCRIMINATOR })
  );
}

export function getWithdrawTokensInstructionDataDecoder(): FixedSizeDecoder<WithdrawTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['amount', getU64Decoder()],
  ]);
}

export function getWithdrawTokensInstructionDataCodec(): FixedSizeCodec<
  WithdrawTokensInstructionDataArgs,
  WithdrawTokensInstructionData
> {
  return combineCodec(
    getWithdrawTokensInstructionDataEncoder(),
    getWithdrawTokensInstructionDataDecoder()
  );
}

export type WithdrawTokensAsyncInput<
  TAccountSystemProgram extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountReceiver extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  governanceConfig?: TransactionSigner<TAccountGovernanceConfig>;
  /** The account that will receive the withdrawn lamports */
  receiver: Address<TAccountReceiver>;
  amount: WithdrawTokensInstructionDataArgs['amount'];
};

export async function getWithdrawTokensInstructionAsync<
  TAccountSystemProgram extends string,
  TAccountGovernanceConfig extends string,
  TAccountReceiver extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: WithdrawTokensAsyncInput<
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountReceiver
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  WithdrawTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountReceiver
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.governanceConfig.value) {
    accounts.governanceConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 111, 118, 101, 114, 110, 97, 110, 99, 101])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.receiver),
    ],
    data: getWithdrawTokensInstructionDataEncoder().encode(
      args as WithdrawTokensInstructionDataArgs
    ),
    programAddress,
  } as WithdrawTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountReceiver
  >);
}

export type WithdrawTokensInput<
  TAccountSystemProgram extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountReceiver extends string = string,
> = {
  systemProgram?: Address<TAccountSystemProgram>;
  governanceConfig: TransactionSigner<TAccountGovernanceConfig>;
  /** The account that will receive the withdrawn lamports */
  receiver: Address<TAccountReceiver>;
  amount: WithdrawTokensInstructionDataArgs['amount'];
};

export function getWithdrawTokensInstruction<
  TAccountSystemProgram extends string,
  TAccountGovernanceConfig extends string,
  TAccountReceiver extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: WithdrawTokensInput<
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountReceiver
  >,
  config?: { programAddress?: TProgramAddress }
): WithdrawTokensInstruction<
  TProgramAddress,
  TAccountSystemProgram,
  TAccountGovernanceConfig,
  TAccountReceiver
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    receiver: { value: input.receiver ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.receiver),
    ],
    data: getWithdrawTokensInstructionDataEncoder().encode(
      args as WithdrawTokensInstructionDataArgs
    ),
    programAddress,
  } as WithdrawTokensInstruction<
    TProgramAddress,
    TAccountSystemProgram,
    TAccountGovernanceConfig,
    TAccountReceiver
  >);
}

export type ParsedWithdrawTokensInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
    governanceConfig: TAccountMetas[1];
    /** The account that will receive the withdrawn lamports */
    receiver: TAccountMetas[2];
  };
  data: WithdrawTokensInstructionData;
};

export function parseWithdrawTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedWithdrawTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      governanceConfig: getNextAccount(),
      receiver: getNextAccount(),
    },
    data: getWithdrawTokensInstructionDataDecoder().decode(instruction.data),
  };
}
