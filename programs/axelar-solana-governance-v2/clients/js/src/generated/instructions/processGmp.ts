/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getCrossChainIdDecoder,
  getCrossChainIdEncoder,
  type CrossChainId,
  type CrossChainIdArgs,
} from '../types';

export const PROCESS_GMP_DISCRIMINATOR = new Uint8Array([
  130, 221, 242, 154, 13, 193, 189, 29,
]);

export function getProcessGmpDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PROCESS_GMP_DISCRIMINATOR);
}

export type ProcessGmpInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountIncomingMessagePda extends string | AccountMeta<string> = string,
  TAccountSigningPda extends string | AccountMeta<string> = string,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountAxelarGatewayProgram extends
    | string
    | AccountMeta<string> = '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountGovernanceConfig extends string | AccountMeta<string> = string,
  TAccountProposalPda extends string | AccountMeta<string> = string,
  TAccountOperatorProposalPda extends string | AccountMeta<string> = string,
  TAccountGovernanceEventAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountAxelarGovernanceProgram extends
    | string
    | AccountMeta<string> = '8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountIncomingMessagePda extends string
        ? WritableAccount<TAccountIncomingMessagePda>
        : TAccountIncomingMessagePda,
      TAccountSigningPda extends string
        ? ReadonlyAccount<TAccountSigningPda>
        : TAccountSigningPda,
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountAxelarGatewayProgram extends string
        ? ReadonlyAccount<TAccountAxelarGatewayProgram>
        : TAccountAxelarGatewayProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGovernanceConfig extends string
        ? WritableAccount<TAccountGovernanceConfig>
        : TAccountGovernanceConfig,
      TAccountProposalPda extends string
        ? WritableAccount<TAccountProposalPda>
        : TAccountProposalPda,
      TAccountOperatorProposalPda extends string
        ? WritableAccount<TAccountOperatorProposalPda>
        : TAccountOperatorProposalPda,
      TAccountGovernanceEventAuthority extends string
        ? ReadonlyAccount<TAccountGovernanceEventAuthority>
        : TAccountGovernanceEventAuthority,
      TAccountAxelarGovernanceProgram extends string
        ? ReadonlyAccount<TAccountAxelarGovernanceProgram>
        : TAccountAxelarGovernanceProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProcessGmpInstructionData = {
  discriminator: ReadonlyUint8Array;
  commandId: ReadonlyUint8Array;
  /** The cross-chain identifier of the message */
  ccId: CrossChainId;
  /** The source address from which the message originates. */
  sourceAddress: string;
  /** The destination blockchain where the message is intended to be sent. */
  destinationChain: string;
  /** The destination address on the target blockchain. */
  destinationAddress: string;
  /** A 32-byte hash of the message payload, ensuring data integrity. */
  payloadHash: ReadonlyUint8Array;
  payload: ReadonlyUint8Array;
};

export type ProcessGmpInstructionDataArgs = {
  commandId: ReadonlyUint8Array;
  /** The cross-chain identifier of the message */
  ccId: CrossChainIdArgs;
  /** The source address from which the message originates. */
  sourceAddress: string;
  /** The destination blockchain where the message is intended to be sent. */
  destinationChain: string;
  /** The destination address on the target blockchain. */
  destinationAddress: string;
  /** A 32-byte hash of the message payload, ensuring data integrity. */
  payloadHash: ReadonlyUint8Array;
  payload: ReadonlyUint8Array;
};

export function getProcessGmpInstructionDataEncoder(): Encoder<ProcessGmpInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['commandId', fixEncoderSize(getBytesEncoder(), 32)],
      ['ccId', getCrossChainIdEncoder()],
      [
        'sourceAddress',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'destinationChain',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'destinationAddress',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['payload', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: PROCESS_GMP_DISCRIMINATOR })
  );
}

export function getProcessGmpInstructionDataDecoder(): Decoder<ProcessGmpInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['commandId', fixDecoderSize(getBytesDecoder(), 32)],
    ['ccId', getCrossChainIdDecoder()],
    ['sourceAddress', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['payload', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getProcessGmpInstructionDataCodec(): Codec<
  ProcessGmpInstructionDataArgs,
  ProcessGmpInstructionData
> {
  return combineCodec(
    getProcessGmpInstructionDataEncoder(),
    getProcessGmpInstructionDataDecoder()
  );
}

export type ProcessGmpAsyncInput<
  TAccountIncomingMessagePda extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountAxelarGatewayProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountProposalPda extends string = string,
  TAccountOperatorProposalPda extends string = string,
  TAccountGovernanceEventAuthority extends string = string,
  TAccountAxelarGovernanceProgram extends string = string,
> = {
  incomingMessagePda?: Address<TAccountIncomingMessagePda>;
  signingPda?: Address<TAccountSigningPda>;
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  eventAuthority?: Address<TAccountEventAuthority>;
  axelarGatewayProgram?: Address<TAccountAxelarGatewayProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: TransactionSigner<TAccountPayer>;
  governanceConfig?: Address<TAccountGovernanceConfig>;
  proposalPda: Address<TAccountProposalPda>;
  operatorProposalPda: Address<TAccountOperatorProposalPda>;
  governanceEventAuthority?: Address<TAccountGovernanceEventAuthority>;
  axelarGovernanceProgram?: Address<TAccountAxelarGovernanceProgram>;
  commandId: ProcessGmpInstructionDataArgs['commandId'];
  ccId: ProcessGmpInstructionDataArgs['ccId'];
  sourceAddress: ProcessGmpInstructionDataArgs['sourceAddress'];
  destinationChain: ProcessGmpInstructionDataArgs['destinationChain'];
  destinationAddress: ProcessGmpInstructionDataArgs['destinationAddress'];
  payloadHash: ProcessGmpInstructionDataArgs['payloadHash'];
  payload: ProcessGmpInstructionDataArgs['payload'];
};

export async function getProcessGmpInstructionAsync<
  TAccountIncomingMessagePda extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountAxelarGatewayProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TAccountGovernanceConfig extends string,
  TAccountProposalPda extends string,
  TAccountOperatorProposalPda extends string,
  TAccountGovernanceEventAuthority extends string,
  TAccountAxelarGovernanceProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: ProcessGmpAsyncInput<
    TAccountIncomingMessagePda,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountAxelarGatewayProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperatorProposalPda,
    TAccountGovernanceEventAuthority,
    TAccountAxelarGovernanceProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ProcessGmpInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountAxelarGatewayProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperatorProposalPda,
    TAccountGovernanceEventAuthority,
    TAccountAxelarGovernanceProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    axelarGatewayProgram: {
      value: input.axelarGatewayProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    proposalPda: { value: input.proposalPda ?? null, isWritable: true },
    operatorProposalPda: {
      value: input.operatorProposalPda ?? null,
      isWritable: true,
    },
    governanceEventAuthority: {
      value: input.governanceEventAuthority ?? null,
      isWritable: false,
    },
    axelarGovernanceProgram: {
      value: input.axelarGovernanceProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.incomingMessagePda.value) {
    accounts.incomingMessagePda.value = await getProgramDerivedAddress({
      programAddress:
        '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            105, 110, 99, 111, 109, 105, 110, 103, 32, 109, 101, 115, 115, 97,
            103, 101,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.commandId)
        ),
      ],
    });
  }
  if (!accounts.signingPda.value) {
    accounts.signingPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 116, 119, 45, 118, 97, 108, 105, 100, 97, 116, 101, 45, 109,
            115, 103,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.commandId)
        ),
      ],
    });
  }
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress:
        '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress:
        '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.axelarGatewayProgram.value) {
    accounts.axelarGatewayProgram.value =
      '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.governanceConfig.value) {
    accounts.governanceConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 111, 118, 101, 114, 110, 97, 110, 99, 101])
        ),
      ],
    });
  }
  if (!accounts.governanceEventAuthority.value) {
    accounts.governanceEventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.axelarGovernanceProgram.value) {
    accounts.axelarGovernanceProgram.value =
      '8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV' as Address<'8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.axelarGatewayProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.proposalPda),
      getAccountMeta(accounts.operatorProposalPda),
      getAccountMeta(accounts.governanceEventAuthority),
      getAccountMeta(accounts.axelarGovernanceProgram),
    ],
    data: getProcessGmpInstructionDataEncoder().encode(
      args as ProcessGmpInstructionDataArgs
    ),
    programAddress,
  } as ProcessGmpInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountAxelarGatewayProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperatorProposalPda,
    TAccountGovernanceEventAuthority,
    TAccountAxelarGovernanceProgram
  >);
}

export type ProcessGmpInput<
  TAccountIncomingMessagePda extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountAxelarGatewayProgram extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountGovernanceConfig extends string = string,
  TAccountProposalPda extends string = string,
  TAccountOperatorProposalPda extends string = string,
  TAccountGovernanceEventAuthority extends string = string,
  TAccountAxelarGovernanceProgram extends string = string,
> = {
  incomingMessagePda: Address<TAccountIncomingMessagePda>;
  signingPda: Address<TAccountSigningPda>;
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  eventAuthority: Address<TAccountEventAuthority>;
  axelarGatewayProgram?: Address<TAccountAxelarGatewayProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  payer: TransactionSigner<TAccountPayer>;
  governanceConfig: Address<TAccountGovernanceConfig>;
  proposalPda: Address<TAccountProposalPda>;
  operatorProposalPda: Address<TAccountOperatorProposalPda>;
  governanceEventAuthority: Address<TAccountGovernanceEventAuthority>;
  axelarGovernanceProgram?: Address<TAccountAxelarGovernanceProgram>;
  commandId: ProcessGmpInstructionDataArgs['commandId'];
  ccId: ProcessGmpInstructionDataArgs['ccId'];
  sourceAddress: ProcessGmpInstructionDataArgs['sourceAddress'];
  destinationChain: ProcessGmpInstructionDataArgs['destinationChain'];
  destinationAddress: ProcessGmpInstructionDataArgs['destinationAddress'];
  payloadHash: ProcessGmpInstructionDataArgs['payloadHash'];
  payload: ProcessGmpInstructionDataArgs['payload'];
};

export function getProcessGmpInstruction<
  TAccountIncomingMessagePda extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountAxelarGatewayProgram extends string,
  TAccountSystemProgram extends string,
  TAccountPayer extends string,
  TAccountGovernanceConfig extends string,
  TAccountProposalPda extends string,
  TAccountOperatorProposalPda extends string,
  TAccountGovernanceEventAuthority extends string,
  TAccountAxelarGovernanceProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
>(
  input: ProcessGmpInput<
    TAccountIncomingMessagePda,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountAxelarGatewayProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperatorProposalPda,
    TAccountGovernanceEventAuthority,
    TAccountAxelarGovernanceProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ProcessGmpInstruction<
  TProgramAddress,
  TAccountIncomingMessagePda,
  TAccountSigningPda,
  TAccountGatewayRootPda,
  TAccountEventAuthority,
  TAccountAxelarGatewayProgram,
  TAccountSystemProgram,
  TAccountPayer,
  TAccountGovernanceConfig,
  TAccountProposalPda,
  TAccountOperatorProposalPda,
  TAccountGovernanceEventAuthority,
  TAccountAxelarGovernanceProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    axelarGatewayProgram: {
      value: input.axelarGatewayProgram ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    governanceConfig: {
      value: input.governanceConfig ?? null,
      isWritable: true,
    },
    proposalPda: { value: input.proposalPda ?? null, isWritable: true },
    operatorProposalPda: {
      value: input.operatorProposalPda ?? null,
      isWritable: true,
    },
    governanceEventAuthority: {
      value: input.governanceEventAuthority ?? null,
      isWritable: false,
    },
    axelarGovernanceProgram: {
      value: input.axelarGovernanceProgram ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.axelarGatewayProgram.value) {
    accounts.axelarGatewayProgram.value =
      '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.axelarGovernanceProgram.value) {
    accounts.axelarGovernanceProgram.value =
      '8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV' as Address<'8sWy2bidXuwtZHfpJ2Ko5AiCsGQyFMf8MKwazB16wmJV'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.axelarGatewayProgram),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.governanceConfig),
      getAccountMeta(accounts.proposalPda),
      getAccountMeta(accounts.operatorProposalPda),
      getAccountMeta(accounts.governanceEventAuthority),
      getAccountMeta(accounts.axelarGovernanceProgram),
    ],
    data: getProcessGmpInstructionDataEncoder().encode(
      args as ProcessGmpInstructionDataArgs
    ),
    programAddress,
  } as ProcessGmpInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountAxelarGatewayProgram,
    TAccountSystemProgram,
    TAccountPayer,
    TAccountGovernanceConfig,
    TAccountProposalPda,
    TAccountOperatorProposalPda,
    TAccountGovernanceEventAuthority,
    TAccountAxelarGovernanceProgram
  >);
}

export type ParsedProcessGmpInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GOVERNANCE_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    incomingMessagePda: TAccountMetas[0];
    signingPda: TAccountMetas[1];
    gatewayRootPda: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    axelarGatewayProgram: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    payer: TAccountMetas[6];
    governanceConfig: TAccountMetas[7];
    proposalPda: TAccountMetas[8];
    operatorProposalPda: TAccountMetas[9];
    governanceEventAuthority: TAccountMetas[10];
    axelarGovernanceProgram: TAccountMetas[11];
  };
  data: ProcessGmpInstructionData;
};

export function parseProcessGmpInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedProcessGmpInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      incomingMessagePda: getNextAccount(),
      signingPda: getNextAccount(),
      gatewayRootPda: getNextAccount(),
      eventAuthority: getNextAccount(),
      axelarGatewayProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      payer: getNextAccount(),
      governanceConfig: getNextAccount(),
      proposalPda: getNextAccount(),
      operatorProposalPda: getNextAccount(),
      governanceEventAuthority: getNextAccount(),
      axelarGovernanceProgram: getNextAccount(),
    },
    data: getProcessGmpInstructionDataDecoder().decode(instruction.data),
  };
}
