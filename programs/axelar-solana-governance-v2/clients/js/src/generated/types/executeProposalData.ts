/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getExecuteProposalCallDataDecoder,
  getExecuteProposalCallDataEncoder,
  type ExecuteProposalCallData,
  type ExecuteProposalCallDataArgs,
} from '.';

export type ExecuteProposalData = {
  /**
   * The target program address for the proposal, represented as a 32-byte
   * array. Will be later converted to a [`solana_program::pubkey::Pubkey`].
   * [`solana_program::pubkey::Pubkey`] when executing the proposal.
   */
  targetAddress: ReadonlyUint8Array;
  /** The data required to call the target program. */
  callData: ExecuteProposalCallData;
  /**
   * A 32-byte array representing the native token U256 value (lamports)
   * associated with the proposal. This is a U256 value and should be casted
   * to u 64
   */
  nativeValue: ReadonlyUint8Array;
};

export type ExecuteProposalDataArgs = {
  /**
   * The target program address for the proposal, represented as a 32-byte
   * array. Will be later converted to a [`solana_program::pubkey::Pubkey`].
   * [`solana_program::pubkey::Pubkey`] when executing the proposal.
   */
  targetAddress: ReadonlyUint8Array;
  /** The data required to call the target program. */
  callData: ExecuteProposalCallDataArgs;
  /**
   * A 32-byte array representing the native token U256 value (lamports)
   * associated with the proposal. This is a U256 value and should be casted
   * to u 64
   */
  nativeValue: ReadonlyUint8Array;
};

export function getExecuteProposalDataEncoder(): Encoder<ExecuteProposalDataArgs> {
  return getStructEncoder([
    ['targetAddress', fixEncoderSize(getBytesEncoder(), 32)],
    ['callData', getExecuteProposalCallDataEncoder()],
    ['nativeValue', fixEncoderSize(getBytesEncoder(), 32)],
  ]);
}

export function getExecuteProposalDataDecoder(): Decoder<ExecuteProposalData> {
  return getStructDecoder([
    ['targetAddress', fixDecoderSize(getBytesDecoder(), 32)],
    ['callData', getExecuteProposalCallDataDecoder()],
    ['nativeValue', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getExecuteProposalDataCodec(): Codec<
  ExecuteProposalDataArgs,
  ExecuteProposalData
> {
  return combineCodec(
    getExecuteProposalDataEncoder(),
    getExecuteProposalDataDecoder()
  );
}
