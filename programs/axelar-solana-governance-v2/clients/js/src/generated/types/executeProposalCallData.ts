/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type Option,
  type OptionOrNullable,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getSolanaAccountMetadataDecoder,
  getSolanaAccountMetadataEncoder,
  type SolanaAccountMetadata,
  type SolanaAccountMetadataArgs,
} from '.';

export type ExecuteProposalCallData = {
  /**
   * The Solana accounts metadata required for the target program in the
   * moment of the proposal execution.
   *
   * In case the target program requires a native token transfer, the first
   * account should be the target account the proposal should transfer the
   * funds to.
   */
  solanaAccounts: Array<SolanaAccountMetadata>;
  /**
   * Apart from the [`Self::solana_accounts`] metadata, and in case the
   * proposal requires a native token transfer to the target contract, the
   * receiver account should be set here.
   */
  solanaNativeValueReceiverAccount: Option<SolanaAccountMetadata>;
  /** The call data required to execute the target program. */
  callData: ReadonlyUint8Array;
};

export type ExecuteProposalCallDataArgs = {
  /**
   * The Solana accounts metadata required for the target program in the
   * moment of the proposal execution.
   *
   * In case the target program requires a native token transfer, the first
   * account should be the target account the proposal should transfer the
   * funds to.
   */
  solanaAccounts: Array<SolanaAccountMetadataArgs>;
  /**
   * Apart from the [`Self::solana_accounts`] metadata, and in case the
   * proposal requires a native token transfer to the target contract, the
   * receiver account should be set here.
   */
  solanaNativeValueReceiverAccount: OptionOrNullable<SolanaAccountMetadataArgs>;
  /** The call data required to execute the target program. */
  callData: ReadonlyUint8Array;
};

export function getExecuteProposalCallDataEncoder(): Encoder<ExecuteProposalCallDataArgs> {
  return getStructEncoder([
    ['solanaAccounts', getArrayEncoder(getSolanaAccountMetadataEncoder())],
    [
      'solanaNativeValueReceiverAccount',
      getOptionEncoder(getSolanaAccountMetadataEncoder()),
    ],
    ['callData', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
  ]);
}

export function getExecuteProposalCallDataDecoder(): Decoder<ExecuteProposalCallData> {
  return getStructDecoder([
    ['solanaAccounts', getArrayDecoder(getSolanaAccountMetadataDecoder())],
    [
      'solanaNativeValueReceiverAccount',
      getOptionDecoder(getSolanaAccountMetadataDecoder()),
    ],
    ['callData', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getExecuteProposalCallDataCodec(): Codec<
  ExecuteProposalCallDataArgs,
  ExecuteProposalCallData
> {
  return combineCodec(
    getExecuteProposalCallDataEncoder(),
    getExecuteProposalCallDataDecoder()
  );
}
