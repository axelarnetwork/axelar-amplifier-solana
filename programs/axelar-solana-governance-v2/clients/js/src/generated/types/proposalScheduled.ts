/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU64Decoder,
  getU64Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from 'gill';

export type ProposalScheduled = {
  hash: ReadonlyUint8Array;
  targetAddress: ReadonlyUint8Array;
  callData: ReadonlyUint8Array;
  nativeValue: ReadonlyUint8Array;
  eta: bigint;
};

export type ProposalScheduledArgs = {
  hash: ReadonlyUint8Array;
  targetAddress: ReadonlyUint8Array;
  callData: ReadonlyUint8Array;
  nativeValue: ReadonlyUint8Array;
  eta: number | bigint;
};

export function getProposalScheduledEncoder(): Encoder<ProposalScheduledArgs> {
  return getStructEncoder([
    ['hash', fixEncoderSize(getBytesEncoder(), 32)],
    ['targetAddress', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['callData', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['nativeValue', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ['eta', getU64Encoder()],
  ]);
}

export function getProposalScheduledDecoder(): Decoder<ProposalScheduled> {
  return getStructDecoder([
    ['hash', fixDecoderSize(getBytesDecoder(), 32)],
    ['targetAddress', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['callData', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['nativeValue', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['eta', getU64Decoder()],
  ]);
}

export function getProposalScheduledCodec(): Codec<
  ProposalScheduledArgs,
  ProposalScheduled
> {
  return combineCodec(
    getProposalScheduledEncoder(),
    getProposalScheduledDecoder()
  );
}
