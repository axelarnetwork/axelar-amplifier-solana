/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';

/** InvalidEncodingScheme: Invalid encoding scheme */
export const AXELAR_SOLANA_GATEWAY_V2_ERROR__INVALID_ENCODING_SCHEME = 0x1770; // 6000
/** BorshSerializeError: Borsh serialize error */
export const AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_SERIALIZE_ERROR = 0x1771; // 6001
/** BorshDeserializeError: Borsh deserialize error */
export const AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_DESERIALIZE_ERROR = 0x1772; // 6002
/** AbiError: ABI error */
export const AXELAR_SOLANA_GATEWAY_V2_ERROR__ABI_ERROR = 0x1773; // 6003
/** Conversion: Internal type conversion error */
export const AXELAR_SOLANA_GATEWAY_V2_ERROR__CONVERSION = 0x1774; // 6004

export type AxelarSolanaGatewayV2Error =
  | typeof AXELAR_SOLANA_GATEWAY_V2_ERROR__ABI_ERROR
  | typeof AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_DESERIALIZE_ERROR
  | typeof AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_SERIALIZE_ERROR
  | typeof AXELAR_SOLANA_GATEWAY_V2_ERROR__CONVERSION
  | typeof AXELAR_SOLANA_GATEWAY_V2_ERROR__INVALID_ENCODING_SCHEME;

let axelarSolanaGatewayV2ErrorMessages:
  | Record<AxelarSolanaGatewayV2Error, string>
  | undefined;
if (process.env.NODE_ENV !== 'production') {
  axelarSolanaGatewayV2ErrorMessages = {
    [AXELAR_SOLANA_GATEWAY_V2_ERROR__ABI_ERROR]: `ABI error`,
    [AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_DESERIALIZE_ERROR]: `Borsh deserialize error`,
    [AXELAR_SOLANA_GATEWAY_V2_ERROR__BORSH_SERIALIZE_ERROR]: `Borsh serialize error`,
    [AXELAR_SOLANA_GATEWAY_V2_ERROR__CONVERSION]: `Internal type conversion error`,
    [AXELAR_SOLANA_GATEWAY_V2_ERROR__INVALID_ENCODING_SCHEME]: `Invalid encoding scheme`,
  };
}

export function getAxelarSolanaGatewayV2ErrorMessage(
  code: AxelarSolanaGatewayV2Error
): string {
  if (process.env.NODE_ENV !== 'production') {
    return (
      axelarSolanaGatewayV2ErrorMessages as Record<
        AxelarSolanaGatewayV2Error,
        string
      >
    )[code];
  }

  return 'Error message not available in production bundles.';
}

export function isAxelarSolanaGatewayV2Error<
  TProgramErrorCode extends AxelarSolanaGatewayV2Error,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
    code
  );
}
