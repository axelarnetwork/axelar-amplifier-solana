/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getU256Decoder,
  getU256Encoder,
  type U256,
  type U256Args,
} from '../types';

export const VERIFIER_SET_TRACKER_DISCRIMINATOR = new Uint8Array([
  41, 8, 163, 157, 229, 233, 20, 181,
]);

export function getVerifierSetTrackerDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFIER_SET_TRACKER_DISCRIMINATOR
  );
}

export type VerifierSetTracker = {
  discriminator: ReadonlyUint8Array;
  /** The canonical bump for this account. */
  bump: number;
  /** Padding for the bump */
  padding: ReadonlyUint8Array;
  /** The epoch associated with this verifier set */
  epoch: U256;
  /** The verifier set hash */
  verifierSetHash: ReadonlyUint8Array;
};

export type VerifierSetTrackerArgs = {
  /** The canonical bump for this account. */
  bump: number;
  /** Padding for the bump */
  padding: ReadonlyUint8Array;
  /** The epoch associated with this verifier set */
  epoch: U256Args;
  /** The verifier set hash */
  verifierSetHash: ReadonlyUint8Array;
};

export function getVerifierSetTrackerEncoder(): FixedSizeEncoder<VerifierSetTrackerArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 7)],
      ['epoch', getU256Encoder()],
      ['verifierSetHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: VERIFIER_SET_TRACKER_DISCRIMINATOR })
  );
}

export function getVerifierSetTrackerDecoder(): FixedSizeDecoder<VerifierSetTracker> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
    ['epoch', getU256Decoder()],
    ['verifierSetHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getVerifierSetTrackerCodec(): FixedSizeCodec<
  VerifierSetTrackerArgs,
  VerifierSetTracker
> {
  return combineCodec(
    getVerifierSetTrackerEncoder(),
    getVerifierSetTrackerDecoder()
  );
}

export function decodeVerifierSetTracker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<VerifierSetTracker, TAddress>;
export function decodeVerifierSetTracker<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<VerifierSetTracker, TAddress>;
export function decodeVerifierSetTracker<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<VerifierSetTracker, TAddress>
  | MaybeAccount<VerifierSetTracker, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getVerifierSetTrackerDecoder()
  );
}

export async function fetchVerifierSetTracker<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<VerifierSetTracker, TAddress>> {
  const maybeAccount = await fetchMaybeVerifierSetTracker(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeVerifierSetTracker<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<VerifierSetTracker, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeVerifierSetTracker(maybeAccount);
}

export async function fetchAllVerifierSetTracker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<VerifierSetTracker>[]> {
  const maybeAccounts = await fetchAllMaybeVerifierSetTracker(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeVerifierSetTracker(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<VerifierSetTracker>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeVerifierSetTracker(maybeAccount)
  );
}

export function getVerifierSetTrackerSize(): number {
  return 80;
}
