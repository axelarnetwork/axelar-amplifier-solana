/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getSignatureVerificationDecoder,
  getSignatureVerificationEncoder,
  type SignatureVerification,
  type SignatureVerificationArgs,
} from '../types';

export const SIGNATURE_VERIFICATION_SESSION_DATA_DISCRIMINATOR = new Uint8Array(
  [77, 45, 59, 53, 208, 86, 239, 109]
);

export function getSignatureVerificationSessionDataDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SIGNATURE_VERIFICATION_SESSION_DATA_DISCRIMINATOR
  );
}

export type SignatureVerificationSessionData = {
  discriminator: ReadonlyUint8Array;
  /** Signature verification session */
  signatureVerification: SignatureVerification;
  /** Seed bump for this account's PDA */
  bump: number;
  /** Padding for memory alignment. */
  pad: ReadonlyUint8Array;
};

export type SignatureVerificationSessionDataArgs = {
  /** Signature verification session */
  signatureVerification: SignatureVerificationArgs;
  /** Seed bump for this account's PDA */
  bump: number;
  /** Padding for memory alignment. */
  pad: ReadonlyUint8Array;
};

export function getSignatureVerificationSessionDataEncoder(): FixedSizeEncoder<SignatureVerificationSessionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['signatureVerification', getSignatureVerificationEncoder()],
      ['bump', getU8Encoder()],
      ['pad', fixEncoderSize(getBytesEncoder(), 15)],
    ]),
    (value) => ({
      ...value,
      discriminator: SIGNATURE_VERIFICATION_SESSION_DATA_DISCRIMINATOR,
    })
  );
}

export function getSignatureVerificationSessionDataDecoder(): FixedSizeDecoder<SignatureVerificationSessionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['signatureVerification', getSignatureVerificationDecoder()],
    ['bump', getU8Decoder()],
    ['pad', fixDecoderSize(getBytesDecoder(), 15)],
  ]);
}

export function getSignatureVerificationSessionDataCodec(): FixedSizeCodec<
  SignatureVerificationSessionDataArgs,
  SignatureVerificationSessionData
> {
  return combineCodec(
    getSignatureVerificationSessionDataEncoder(),
    getSignatureVerificationSessionDataDecoder()
  );
}

export function decodeSignatureVerificationSessionData<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SignatureVerificationSessionData, TAddress>;
export function decodeSignatureVerificationSessionData<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SignatureVerificationSessionData, TAddress>;
export function decodeSignatureVerificationSessionData<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<SignatureVerificationSessionData, TAddress>
  | MaybeAccount<SignatureVerificationSessionData, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSignatureVerificationSessionDataDecoder()
  );
}

export async function fetchSignatureVerificationSessionData<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SignatureVerificationSessionData, TAddress>> {
  const maybeAccount = await fetchMaybeSignatureVerificationSessionData(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSignatureVerificationSessionData<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SignatureVerificationSessionData, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSignatureVerificationSessionData(maybeAccount);
}

export async function fetchAllSignatureVerificationSessionData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SignatureVerificationSessionData>[]> {
  const maybeAccounts = await fetchAllMaybeSignatureVerificationSessionData(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSignatureVerificationSessionData(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SignatureVerificationSessionData>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSignatureVerificationSessionData(maybeAccount)
  );
}

export function getSignatureVerificationSessionDataSize(): number {
  return 104;
}
