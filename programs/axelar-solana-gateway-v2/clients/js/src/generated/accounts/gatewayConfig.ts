/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getU256Decoder,
  getU256Encoder,
  type U256,
  type U256Args,
} from '../types';

export const GATEWAY_CONFIG_DISCRIMINATOR = new Uint8Array([
  91, 247, 66, 27, 24, 1, 48, 176,
]);

export function getGatewayConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    GATEWAY_CONFIG_DISCRIMINATOR
  );
}

export type GatewayConfig = {
  discriminator: ReadonlyUint8Array;
  /** current epoch points to the latest signer set hash */
  currentEpoch: U256;
  /** how many n epochs do we consider valid */
  previousVerifierSetRetention: U256;
  /** the minimum delay required between rotations */
  minimumRotationDelay: bigint;
  /** timestamp tracking of when the previous rotation happened */
  lastRotationTimestamp: bigint;
  /** The gateway operator. */
  operator: Address;
  /** The domain separator, used as an input for hashing payloads. */
  domainSeparator: ReadonlyUint8Array;
  /** The canonical bump for this account. */
  bump: number;
  /** padding for bump */
  padding: ReadonlyUint8Array;
};

export type GatewayConfigArgs = {
  /** current epoch points to the latest signer set hash */
  currentEpoch: U256Args;
  /** how many n epochs do we consider valid */
  previousVerifierSetRetention: U256Args;
  /** the minimum delay required between rotations */
  minimumRotationDelay: number | bigint;
  /** timestamp tracking of when the previous rotation happened */
  lastRotationTimestamp: number | bigint;
  /** The gateway operator. */
  operator: Address;
  /** The domain separator, used as an input for hashing payloads. */
  domainSeparator: ReadonlyUint8Array;
  /** The canonical bump for this account. */
  bump: number;
  /** padding for bump */
  padding: ReadonlyUint8Array;
};

export function getGatewayConfigEncoder(): FixedSizeEncoder<GatewayConfigArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['currentEpoch', getU256Encoder()],
      ['previousVerifierSetRetention', getU256Encoder()],
      ['minimumRotationDelay', getU64Encoder()],
      ['lastRotationTimestamp', getU64Encoder()],
      ['operator', getAddressEncoder()],
      ['domainSeparator', fixEncoderSize(getBytesEncoder(), 32)],
      ['bump', getU8Encoder()],
      ['padding', fixEncoderSize(getBytesEncoder(), 7)],
    ]),
    (value) => ({ ...value, discriminator: GATEWAY_CONFIG_DISCRIMINATOR })
  );
}

export function getGatewayConfigDecoder(): FixedSizeDecoder<GatewayConfig> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['currentEpoch', getU256Decoder()],
    ['previousVerifierSetRetention', getU256Decoder()],
    ['minimumRotationDelay', getU64Decoder()],
    ['lastRotationTimestamp', getU64Decoder()],
    ['operator', getAddressDecoder()],
    ['domainSeparator', fixDecoderSize(getBytesDecoder(), 32)],
    ['bump', getU8Decoder()],
    ['padding', fixDecoderSize(getBytesDecoder(), 7)],
  ]);
}

export function getGatewayConfigCodec(): FixedSizeCodec<
  GatewayConfigArgs,
  GatewayConfig
> {
  return combineCodec(getGatewayConfigEncoder(), getGatewayConfigDecoder());
}

export function decodeGatewayConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<GatewayConfig, TAddress>;
export function decodeGatewayConfig<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<GatewayConfig, TAddress>;
export function decodeGatewayConfig<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<GatewayConfig, TAddress> | MaybeAccount<GatewayConfig, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getGatewayConfigDecoder()
  );
}

export async function fetchGatewayConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<GatewayConfig, TAddress>> {
  const maybeAccount = await fetchMaybeGatewayConfig(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeGatewayConfig<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<GatewayConfig, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeGatewayConfig(maybeAccount);
}

export async function fetchAllGatewayConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<GatewayConfig>[]> {
  const maybeAccounts = await fetchAllMaybeGatewayConfig(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeGatewayConfig(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<GatewayConfig>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeGatewayConfig(maybeAccount));
}

export function getGatewayConfigSize(): number {
  return 160;
}
