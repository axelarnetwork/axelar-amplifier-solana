/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getVerifierSetLeafDecoder,
  getVerifierSetLeafEncoder,
  type VerifierSetLeaf,
  type VerifierSetLeafArgs,
} from '../types';

export const VERIFY_SIGNATURE_DISCRIMINATOR = new Uint8Array([
  91, 139, 24, 69, 251, 162, 245, 112,
]);

export function getVerifySignatureDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VERIFY_SIGNATURE_DISCRIMINATOR
  );
}

export type VerifySignatureInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountVerificationSessionAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVerifierSetTrackerPda extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountVerificationSessionAccount extends string
        ? WritableAccount<TAccountVerificationSessionAccount>
        : TAccountVerificationSessionAccount,
      TAccountVerifierSetTrackerPda extends string
        ? ReadonlyAccount<TAccountVerifierSetTrackerPda>
        : TAccountVerifierSetTrackerPda,
      ...TRemainingAccounts,
    ]
  >;

export type VerifySignatureInstructionData = {
  discriminator: ReadonlyUint8Array;
  payloadMerkleRoot: ReadonlyUint8Array;
  signature: ReadonlyUint8Array;
  leaf: VerifierSetLeaf;
  merkleProof: ReadonlyUint8Array;
  verifierSetHash: ReadonlyUint8Array;
};

export type VerifySignatureInstructionDataArgs = {
  payloadMerkleRoot: ReadonlyUint8Array;
  signature: ReadonlyUint8Array;
  leaf: VerifierSetLeafArgs;
  merkleProof: ReadonlyUint8Array;
  verifierSetHash: ReadonlyUint8Array;
};

export function getVerifySignatureInstructionDataEncoder(): Encoder<VerifySignatureInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['payloadMerkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['signature', fixEncoderSize(getBytesEncoder(), 65)],
      ['leaf', getVerifierSetLeafEncoder()],
      ['merkleProof', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['verifierSetHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: VERIFY_SIGNATURE_DISCRIMINATOR })
  );
}

export function getVerifySignatureInstructionDataDecoder(): Decoder<VerifySignatureInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['payloadMerkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['signature', fixDecoderSize(getBytesDecoder(), 65)],
    ['leaf', getVerifierSetLeafDecoder()],
    ['merkleProof', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['verifierSetHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getVerifySignatureInstructionDataCodec(): Codec<
  VerifySignatureInstructionDataArgs,
  VerifySignatureInstructionData
> {
  return combineCodec(
    getVerifySignatureInstructionDataEncoder(),
    getVerifySignatureInstructionDataDecoder()
  );
}

export type VerifySignatureAsyncInput<
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
> = {
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  verificationSessionAccount?: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda?: Address<TAccountVerifierSetTrackerPda>;
  payloadMerkleRoot: VerifySignatureInstructionDataArgs['payloadMerkleRoot'];
  signature: VerifySignatureInstructionDataArgs['signature'];
  leaf: VerifySignatureInstructionDataArgs['leaf'];
  merkleProof: VerifySignatureInstructionDataArgs['merkleProof'];
  verifierSetHash: VerifySignatureInstructionDataArgs['verifierSetHash'];
};

export async function getVerifySignatureInstructionAsync<
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: VerifySignatureAsyncInput<
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  VerifySignatureInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: true,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.verificationSessionAccount.value) {
    accounts.verificationSessionAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 116, 119, 45, 115, 105, 103, 45, 118, 101, 114, 105, 102,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.payloadMerkleRoot)
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.verifierSetHash)
        ),
      ],
    });
  }
  if (!accounts.verifierSetTrackerPda.value) {
    accounts.verifierSetTrackerPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 101, 114, 45, 115, 101, 116, 45, 116, 114, 97, 99, 107, 101,
            114,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.verifierSetHash)
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
    ],
    data: getVerifySignatureInstructionDataEncoder().encode(
      args as VerifySignatureInstructionDataArgs
    ),
    programAddress,
  } as VerifySignatureInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda
  >);
}

export type VerifySignatureInput<
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
> = {
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda: Address<TAccountVerifierSetTrackerPda>;
  payloadMerkleRoot: VerifySignatureInstructionDataArgs['payloadMerkleRoot'];
  signature: VerifySignatureInstructionDataArgs['signature'];
  leaf: VerifySignatureInstructionDataArgs['leaf'];
  merkleProof: VerifySignatureInstructionDataArgs['merkleProof'];
  verifierSetHash: VerifySignatureInstructionDataArgs['verifierSetHash'];
};

export function getVerifySignatureInstruction<
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: VerifySignatureInput<
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda
  >,
  config?: { programAddress?: TProgramAddress }
): VerifySignatureInstruction<
  TProgramAddress,
  TAccountGatewayRootPda,
  TAccountVerificationSessionAccount,
  TAccountVerifierSetTrackerPda
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: true,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
    ],
    data: getVerifySignatureInstructionDataEncoder().encode(
      args as VerifySignatureInstructionDataArgs
    ),
    programAddress,
  } as VerifySignatureInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda
  >);
}

export type ParsedVerifySignatureInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    gatewayRootPda: TAccountMetas[0];
    verificationSessionAccount: TAccountMetas[1];
    verifierSetTrackerPda: TAccountMetas[2];
  };
  data: VerifySignatureInstructionData;
};

export function parseVerifySignatureInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedVerifySignatureInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      gatewayRootPda: getNextAccount(),
      verificationSessionAccount: getNextAccount(),
      verifierSetTrackerPda: getNextAccount(),
    },
    data: getVerifySignatureInstructionDataDecoder().decode(instruction.data),
  };
}
