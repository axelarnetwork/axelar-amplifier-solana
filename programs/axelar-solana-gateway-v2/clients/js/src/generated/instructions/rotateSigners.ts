/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const ROTATE_SIGNERS_DISCRIMINATOR = new Uint8Array([
  122, 196, 231, 159, 163, 24, 207, 166,
]);

export function getRotateSignersDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ROTATE_SIGNERS_DISCRIMINATOR
  );
}

export type RotateSignersInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountVerificationSessionAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVerifierSetTrackerPda extends string | AccountMeta<string> = string,
  TAccountNewVerifierSetTracker extends string | AccountMeta<string> = string,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountOperator extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGatewayRootPda extends string
        ? WritableAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountVerificationSessionAccount extends string
        ? ReadonlyAccount<TAccountVerificationSessionAccount>
        : TAccountVerificationSessionAccount,
      TAccountVerifierSetTrackerPda extends string
        ? ReadonlyAccount<TAccountVerifierSetTrackerPda>
        : TAccountVerifierSetTrackerPda,
      TAccountNewVerifierSetTracker extends string
        ? WritableAccount<TAccountNewVerifierSetTracker>
        : TAccountNewVerifierSetTracker,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountOperator extends string
        ? ReadonlySignerAccount<TAccountOperator> &
            AccountSignerMeta<TAccountOperator>
        : TAccountOperator,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RotateSignersInstructionData = {
  discriminator: ReadonlyUint8Array;
  newVerifierSetMerkleRoot: ReadonlyUint8Array;
};

export type RotateSignersInstructionDataArgs = {
  newVerifierSetMerkleRoot: ReadonlyUint8Array;
};

export function getRotateSignersInstructionDataEncoder(): FixedSizeEncoder<RotateSignersInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newVerifierSetMerkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: ROTATE_SIGNERS_DISCRIMINATOR })
  );
}

export function getRotateSignersInstructionDataDecoder(): FixedSizeDecoder<RotateSignersInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newVerifierSetMerkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getRotateSignersInstructionDataCodec(): FixedSizeCodec<
  RotateSignersInstructionDataArgs,
  RotateSignersInstructionData
> {
  return combineCodec(
    getRotateSignersInstructionDataEncoder(),
    getRotateSignersInstructionDataDecoder()
  );
}

export type RotateSignersAsyncInput<
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
  TAccountNewVerifierSetTracker extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountOperator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda: Address<TAccountVerifierSetTrackerPda>;
  newVerifierSetTracker?: Address<TAccountNewVerifierSetTracker>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  operator?: TransactionSigner<TAccountOperator>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newVerifierSetMerkleRoot: RotateSignersInstructionDataArgs['newVerifierSetMerkleRoot'];
};

export async function getRotateSignersInstructionAsync<
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TAccountNewVerifierSetTracker extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountOperator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: RotateSignersAsyncInput<
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountNewVerifierSetTracker,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountOperator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RotateSignersInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountNewVerifierSetTracker,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountOperator,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: true },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: false,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
    newVerifierSetTracker: {
      value: input.newVerifierSetTracker ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.newVerifierSetTracker.value) {
    accounts.newVerifierSetTracker.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 101, 114, 45, 115, 101, 116, 45, 116, 114, 97, 99, 107, 101,
            114,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.newVerifierSetMerkleRoot)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
      getAccountMeta(accounts.newVerifierSetTracker),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getRotateSignersInstructionDataEncoder().encode(
      args as RotateSignersInstructionDataArgs
    ),
    programAddress,
  } as RotateSignersInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountNewVerifierSetTracker,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountOperator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type RotateSignersInput<
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
  TAccountNewVerifierSetTracker extends string = string,
  TAccountPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountOperator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda: Address<TAccountVerifierSetTrackerPda>;
  newVerifierSetTracker: Address<TAccountNewVerifierSetTracker>;
  payer: TransactionSigner<TAccountPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  operator?: TransactionSigner<TAccountOperator>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  newVerifierSetMerkleRoot: RotateSignersInstructionDataArgs['newVerifierSetMerkleRoot'];
};

export function getRotateSignersInstruction<
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TAccountNewVerifierSetTracker extends string,
  TAccountPayer extends string,
  TAccountSystemProgram extends string,
  TAccountOperator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: RotateSignersInput<
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountNewVerifierSetTracker,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountOperator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RotateSignersInstruction<
  TProgramAddress,
  TAccountGatewayRootPda,
  TAccountVerificationSessionAccount,
  TAccountVerifierSetTrackerPda,
  TAccountNewVerifierSetTracker,
  TAccountPayer,
  TAccountSystemProgram,
  TAccountOperator,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: true },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: false,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
    newVerifierSetTracker: {
      value: input.newVerifierSetTracker ?? null,
      isWritable: true,
    },
    payer: { value: input.payer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    operator: { value: input.operator ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
      getAccountMeta(accounts.newVerifierSetTracker),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.operator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getRotateSignersInstructionDataEncoder().encode(
      args as RotateSignersInstructionDataArgs
    ),
    programAddress,
  } as RotateSignersInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountNewVerifierSetTracker,
    TAccountPayer,
    TAccountSystemProgram,
    TAccountOperator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedRotateSignersInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    gatewayRootPda: TAccountMetas[0];
    verificationSessionAccount: TAccountMetas[1];
    verifierSetTrackerPda: TAccountMetas[2];
    newVerifierSetTracker: TAccountMetas[3];
    payer: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    operator?: TAccountMetas[6] | undefined;
    eventAuthority: TAccountMetas[7];
    program: TAccountMetas[8];
  };
  data: RotateSignersInstructionData;
};

export function parseRotateSignersInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRotateSignersInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 9) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      gatewayRootPda: getNextAccount(),
      verificationSessionAccount: getNextAccount(),
      verifierSetTrackerPda: getNextAccount(),
      newVerifierSetTracker: getNextAccount(),
      payer: getNextAccount(),
      systemProgram: getNextAccount(),
      operator: getNextOptionalAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getRotateSignersInstructionDataDecoder().decode(instruction.data),
  };
}
