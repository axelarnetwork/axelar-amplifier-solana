/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CALL_CONTRACT_DISCRIMINATOR = new Uint8Array([
  177, 150, 85, 130, 129, 92, 188, 211,
]);

export function getCallContractDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CALL_CONTRACT_DISCRIMINATOR
  );
}

export type CallContractInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountCaller extends string | AccountMeta<string> = string,
  TAccountSigningPda extends string | AccountMeta<string> = string,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountCaller extends string
        ? ReadonlyAccount<TAccountCaller>
        : TAccountCaller,
      TAccountSigningPda extends string
        ? ReadonlySignerAccount<TAccountSigningPda> &
            AccountSignerMeta<TAccountSigningPda>
        : TAccountSigningPda,
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CallContractInstructionData = {
  discriminator: ReadonlyUint8Array;
  destinationChain: string;
  destinationContractAddress: string;
  payload: ReadonlyUint8Array;
  signingPdaBump: number;
};

export type CallContractInstructionDataArgs = {
  destinationChain: string;
  destinationContractAddress: string;
  payload: ReadonlyUint8Array;
  signingPdaBump: number;
};

export function getCallContractInstructionDataEncoder(): Encoder<CallContractInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'destinationChain',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'destinationContractAddress',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['payload', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['signingPdaBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: CALL_CONTRACT_DISCRIMINATOR })
  );
}

export function getCallContractInstructionDataDecoder(): Decoder<CallContractInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationContractAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['payload', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['signingPdaBump', getU8Decoder()],
  ]);
}

export function getCallContractInstructionDataCodec(): Codec<
  CallContractInstructionDataArgs,
  CallContractInstructionData
> {
  return combineCodec(
    getCallContractInstructionDataEncoder(),
    getCallContractInstructionDataDecoder()
  );
}

export type CallContractAsyncInput<
  TAccountCaller extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** The program that wants to call us - can be a direct signer or program */
  caller: Address<TAccountCaller>;
  /** The standardized PDA that must sign - derived from the calling program */
  signingPda?: TransactionSigner<TAccountSigningPda>;
  /** The gateway configuration PDA (read-only) */
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  destinationChain: CallContractInstructionDataArgs['destinationChain'];
  destinationContractAddress: CallContractInstructionDataArgs['destinationContractAddress'];
  payload: CallContractInstructionDataArgs['payload'];
  signingPdaBump: CallContractInstructionDataArgs['signingPdaBump'];
};

export async function getCallContractInstructionAsync<
  TAccountCaller extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: CallContractAsyncInput<
    TAccountCaller,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CallContractInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCallContractInstructionDataEncoder().encode(
      args as CallContractInstructionDataArgs
    ),
    programAddress,
  } as CallContractInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type CallContractInput<
  TAccountCaller extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  /** The program that wants to call us - can be a direct signer or program */
  caller: Address<TAccountCaller>;
  /** The standardized PDA that must sign - derived from the calling program */
  signingPda?: TransactionSigner<TAccountSigningPda>;
  /** The gateway configuration PDA (read-only) */
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  destinationChain: CallContractInstructionDataArgs['destinationChain'];
  destinationContractAddress: CallContractInstructionDataArgs['destinationContractAddress'];
  payload: CallContractInstructionDataArgs['payload'];
  signingPdaBump: CallContractInstructionDataArgs['signingPdaBump'];
};

export function getCallContractInstruction<
  TAccountCaller extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: CallContractInput<
    TAccountCaller,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CallContractInstruction<
  TProgramAddress,
  TAccountCaller,
  TAccountSigningPda,
  TAccountGatewayRootPda,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    caller: { value: input.caller ?? null, isWritable: false },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getCallContractInstructionDataEncoder().encode(
      args as CallContractInstructionDataArgs
    ),
    programAddress,
  } as CallContractInstruction<
    TProgramAddress,
    TAccountCaller,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedCallContractInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program that wants to call us - can be a direct signer or program */
    caller: TAccountMetas[0];
    /** The standardized PDA that must sign - derived from the calling program */
    signingPda?: TAccountMetas[1] | undefined;
    /** The gateway configuration PDA (read-only) */
    gatewayRootPda: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: CallContractInstructionData;
};

export function parseCallContractInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCallContractInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      caller: getNextAccount(),
      signingPda: getNextOptionalAccount(),
      gatewayRootPda: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCallContractInstructionDataDecoder().decode(instruction.data),
  };
}
