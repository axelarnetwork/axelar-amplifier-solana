/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getMessageLeafDecoder,
  getMessageLeafEncoder,
  type MessageLeaf,
  type MessageLeafArgs,
} from '../types';

export const APPROVE_MESSAGE_DISCRIMINATOR = new Uint8Array([
  65, 154, 132, 135, 105, 5, 173, 21,
]);

export function getApproveMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    APPROVE_MESSAGE_DISCRIMINATOR
  );
}

export type ApproveMessageInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountFunder extends string | AccountMeta<string> = string,
  TAccountVerificationSessionAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountIncomingMessagePda extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountFunder extends string
        ? WritableSignerAccount<TAccountFunder> &
            AccountSignerMeta<TAccountFunder>
        : TAccountFunder,
      TAccountVerificationSessionAccount extends string
        ? ReadonlyAccount<TAccountVerificationSessionAccount>
        : TAccountVerificationSessionAccount,
      TAccountIncomingMessagePda extends string
        ? WritableAccount<TAccountIncomingMessagePda>
        : TAccountIncomingMessagePda,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ApproveMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** The leaf node representing the message in the Merkle tree. */
  leaf: MessageLeaf;
  /**
   * The Merkle proof demonstrating the message's inclusion in the payload's
   * Merkle tree.
   */
  proof: ReadonlyUint8Array;
  payloadMerkleRoot: ReadonlyUint8Array;
};

export type ApproveMessageInstructionDataArgs = {
  /** The leaf node representing the message in the Merkle tree. */
  leaf: MessageLeafArgs;
  /**
   * The Merkle proof demonstrating the message's inclusion in the payload's
   * Merkle tree.
   */
  proof: ReadonlyUint8Array;
  payloadMerkleRoot: ReadonlyUint8Array;
};

export function getApproveMessageInstructionDataEncoder(): Encoder<ApproveMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['leaf', getMessageLeafEncoder()],
      ['proof', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
      ['payloadMerkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({ ...value, discriminator: APPROVE_MESSAGE_DISCRIMINATOR })
  );
}

export function getApproveMessageInstructionDataDecoder(): Decoder<ApproveMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['leaf', getMessageLeafDecoder()],
    ['proof', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
    ['payloadMerkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getApproveMessageInstructionDataCodec(): Codec<
  ApproveMessageInstructionDataArgs,
  ApproveMessageInstructionData
> {
  return combineCodec(
    getApproveMessageInstructionDataEncoder(),
    getApproveMessageInstructionDataDecoder()
  );
}

export type ApproveMessageAsyncInput<
  TAccountGatewayRootPda extends string = string,
  TAccountFunder extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountIncomingMessagePda extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  funder: TransactionSigner<TAccountFunder>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  incomingMessagePda: Address<TAccountIncomingMessagePda>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  leaf: ApproveMessageInstructionDataArgs['leaf'];
  proof: ApproveMessageInstructionDataArgs['proof'];
  payloadMerkleRoot: ApproveMessageInstructionDataArgs['payloadMerkleRoot'];
};

export async function getApproveMessageInstructionAsync<
  TAccountGatewayRootPda extends string,
  TAccountFunder extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountIncomingMessagePda extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: ApproveMessageAsyncInput<
    TAccountGatewayRootPda,
    TAccountFunder,
    TAccountVerificationSessionAccount,
    TAccountIncomingMessagePda,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ApproveMessageInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountFunder,
    TAccountVerificationSessionAccount,
    TAccountIncomingMessagePda,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: false,
    },
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getApproveMessageInstructionDataEncoder().encode(
      args as ApproveMessageInstructionDataArgs
    ),
    programAddress,
  } as ApproveMessageInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountFunder,
    TAccountVerificationSessionAccount,
    TAccountIncomingMessagePda,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ApproveMessageInput<
  TAccountGatewayRootPda extends string = string,
  TAccountFunder extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountIncomingMessagePda extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  funder: TransactionSigner<TAccountFunder>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  incomingMessagePda: Address<TAccountIncomingMessagePda>;
  systemProgram?: Address<TAccountSystemProgram>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  leaf: ApproveMessageInstructionDataArgs['leaf'];
  proof: ApproveMessageInstructionDataArgs['proof'];
  payloadMerkleRoot: ApproveMessageInstructionDataArgs['payloadMerkleRoot'];
};

export function getApproveMessageInstruction<
  TAccountGatewayRootPda extends string,
  TAccountFunder extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountIncomingMessagePda extends string,
  TAccountSystemProgram extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: ApproveMessageInput<
    TAccountGatewayRootPda,
    TAccountFunder,
    TAccountVerificationSessionAccount,
    TAccountIncomingMessagePda,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ApproveMessageInstruction<
  TProgramAddress,
  TAccountGatewayRootPda,
  TAccountFunder,
  TAccountVerificationSessionAccount,
  TAccountIncomingMessagePda,
  TAccountSystemProgram,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    funder: { value: input.funder ?? null, isWritable: true },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: false,
    },
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.funder),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getApproveMessageInstructionDataEncoder().encode(
      args as ApproveMessageInstructionDataArgs
    ),
    programAddress,
  } as ApproveMessageInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountFunder,
    TAccountVerificationSessionAccount,
    TAccountIncomingMessagePda,
    TAccountSystemProgram,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedApproveMessageInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    gatewayRootPda: TAccountMetas[0];
    funder: TAccountMetas[1];
    verificationSessionAccount: TAccountMetas[2];
    incomingMessagePda: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    eventAuthority: TAccountMetas[5];
    program: TAccountMetas[6];
  };
  data: ApproveMessageInstructionData;
};

export function parseApproveMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedApproveMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      gatewayRootPda: getNextAccount(),
      funder: getNextAccount(),
      verificationSessionAccount: getNextAccount(),
      incomingMessagePda: getNextAccount(),
      systemProgram: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getApproveMessageInstructionDataDecoder().decode(instruction.data),
  };
}
