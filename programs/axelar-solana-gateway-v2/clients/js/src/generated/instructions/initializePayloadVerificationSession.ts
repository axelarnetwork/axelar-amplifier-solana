/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const INITIALIZE_PAYLOAD_VERIFICATION_SESSION_DISCRIMINATOR =
  new Uint8Array([136, 201, 241, 74, 8, 237, 63, 231]);

export function getInitializePayloadVerificationSessionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_PAYLOAD_VERIFICATION_SESSION_DISCRIMINATOR
  );
}

export type InitializePayloadVerificationSessionInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountVerificationSessionAccount extends
    | string
    | AccountMeta<string> = string,
  TAccountVerifierSetTrackerPda extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountVerificationSessionAccount extends string
        ? WritableAccount<TAccountVerificationSessionAccount>
        : TAccountVerificationSessionAccount,
      TAccountVerifierSetTrackerPda extends string
        ? ReadonlyAccount<TAccountVerifierSetTrackerPda>
        : TAccountVerifierSetTrackerPda,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializePayloadVerificationSessionInstructionData = {
  discriminator: ReadonlyUint8Array;
  merkleRoot: ReadonlyUint8Array;
  verifierSetHash: ReadonlyUint8Array;
};

export type InitializePayloadVerificationSessionInstructionDataArgs = {
  merkleRoot: ReadonlyUint8Array;
  verifierSetHash: ReadonlyUint8Array;
};

export function getInitializePayloadVerificationSessionInstructionDataEncoder(): FixedSizeEncoder<InitializePayloadVerificationSessionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['merkleRoot', fixEncoderSize(getBytesEncoder(), 32)],
      ['verifierSetHash', fixEncoderSize(getBytesEncoder(), 32)],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_PAYLOAD_VERIFICATION_SESSION_DISCRIMINATOR,
    })
  );
}

export function getInitializePayloadVerificationSessionInstructionDataDecoder(): FixedSizeDecoder<InitializePayloadVerificationSessionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['merkleRoot', fixDecoderSize(getBytesDecoder(), 32)],
    ['verifierSetHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getInitializePayloadVerificationSessionInstructionDataCodec(): FixedSizeCodec<
  InitializePayloadVerificationSessionInstructionDataArgs,
  InitializePayloadVerificationSessionInstructionData
> {
  return combineCodec(
    getInitializePayloadVerificationSessionInstructionDataEncoder(),
    getInitializePayloadVerificationSessionInstructionDataDecoder()
  );
}

export type InitializePayloadVerificationSessionAsyncInput<
  TAccountPayer extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  verificationSessionAccount?: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda?: Address<TAccountVerifierSetTrackerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  merkleRoot: InitializePayloadVerificationSessionInstructionDataArgs['merkleRoot'];
  verifierSetHash: InitializePayloadVerificationSessionInstructionDataArgs['verifierSetHash'];
};

export async function getInitializePayloadVerificationSessionInstructionAsync<
  TAccountPayer extends string,
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: InitializePayloadVerificationSessionAsyncInput<
    TAccountPayer,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializePayloadVerificationSessionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: true,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.verificationSessionAccount.value) {
    accounts.verificationSessionAccount.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 116, 119, 45, 115, 105, 103, 45, 118, 101, 114, 105, 102,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.merkleRoot)
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.verifierSetHash)
        ),
      ],
    });
  }
  if (!accounts.verifierSetTrackerPda.value) {
    accounts.verifierSetTrackerPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            118, 101, 114, 45, 115, 101, 116, 45, 116, 114, 97, 99, 107, 101,
            114,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.verifierSetHash)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializePayloadVerificationSessionInstructionDataEncoder().encode(
      args as InitializePayloadVerificationSessionInstructionDataArgs
    ),
    programAddress,
  } as InitializePayloadVerificationSessionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountSystemProgram
  >);
}

export type InitializePayloadVerificationSessionInput<
  TAccountPayer extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountVerificationSessionAccount extends string = string,
  TAccountVerifierSetTrackerPda extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  verificationSessionAccount: Address<TAccountVerificationSessionAccount>;
  verifierSetTrackerPda: Address<TAccountVerifierSetTrackerPda>;
  systemProgram?: Address<TAccountSystemProgram>;
  merkleRoot: InitializePayloadVerificationSessionInstructionDataArgs['merkleRoot'];
  verifierSetHash: InitializePayloadVerificationSessionInstructionDataArgs['verifierSetHash'];
};

export function getInitializePayloadVerificationSessionInstruction<
  TAccountPayer extends string,
  TAccountGatewayRootPda extends string,
  TAccountVerificationSessionAccount extends string,
  TAccountVerifierSetTrackerPda extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: InitializePayloadVerificationSessionInput<
    TAccountPayer,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializePayloadVerificationSessionInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountGatewayRootPda,
  TAccountVerificationSessionAccount,
  TAccountVerifierSetTrackerPda,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    verificationSessionAccount: {
      value: input.verificationSessionAccount ?? null,
      isWritable: true,
    },
    verifierSetTrackerPda: {
      value: input.verifierSetTrackerPda ?? null,
      isWritable: false,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.verificationSessionAccount),
      getAccountMeta(accounts.verifierSetTrackerPda),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializePayloadVerificationSessionInstructionDataEncoder().encode(
      args as InitializePayloadVerificationSessionInstructionDataArgs
    ),
    programAddress,
  } as InitializePayloadVerificationSessionInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountGatewayRootPda,
    TAccountVerificationSessionAccount,
    TAccountVerifierSetTrackerPda,
    TAccountSystemProgram
  >);
}

export type ParsedInitializePayloadVerificationSessionInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    gatewayRootPda: TAccountMetas[1];
    verificationSessionAccount: TAccountMetas[2];
    verifierSetTrackerPda: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: InitializePayloadVerificationSessionInstructionData;
};

export function parseInitializePayloadVerificationSessionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializePayloadVerificationSessionInstruction<
  TProgram,
  TAccountMetas
> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      gatewayRootPda: getNextAccount(),
      verificationSessionAccount: getNextAccount(),
      verifierSetTrackerPda: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializePayloadVerificationSessionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
