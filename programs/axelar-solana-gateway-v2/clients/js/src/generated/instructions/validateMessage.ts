/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import {
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';
import {
  getMessageDecoder,
  getMessageEncoder,
  type Message,
  type MessageArgs,
} from '../types';

export const VALIDATE_MESSAGE_DISCRIMINATOR = new Uint8Array([
  237, 229, 200, 193, 7, 229, 212, 127,
]);

export function getValidateMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    VALIDATE_MESSAGE_DISCRIMINATOR
  );
}

export type ValidateMessageInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountIncomingMessagePda extends string | AccountMeta<string> = string,
  TAccountCaller extends string | AccountMeta<string> = string,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountIncomingMessagePda extends string
        ? WritableAccount<TAccountIncomingMessagePda>
        : TAccountIncomingMessagePda,
      TAccountCaller extends string
        ? ReadonlySignerAccount<TAccountCaller> &
            AccountSignerMeta<TAccountCaller>
        : TAccountCaller,
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ValidateMessageInstructionData = {
  discriminator: ReadonlyUint8Array;
  message: Message;
};

export type ValidateMessageInstructionDataArgs = { message: MessageArgs };

export function getValidateMessageInstructionDataEncoder(): Encoder<ValidateMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['message', getMessageEncoder()],
    ]),
    (value) => ({ ...value, discriminator: VALIDATE_MESSAGE_DISCRIMINATOR })
  );
}

export function getValidateMessageInstructionDataDecoder(): Decoder<ValidateMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['message', getMessageDecoder()],
  ]);
}

export function getValidateMessageInstructionDataCodec(): Codec<
  ValidateMessageInstructionDataArgs,
  ValidateMessageInstructionData
> {
  return combineCodec(
    getValidateMessageInstructionDataEncoder(),
    getValidateMessageInstructionDataDecoder()
  );
}

export type ValidateMessageAsyncInput<
  TAccountIncomingMessagePda extends string = string,
  TAccountCaller extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  incomingMessagePda?: Address<TAccountIncomingMessagePda>;
  /** The caller must be a PDA derived from the destination program using command_id and signing_pda_bump */
  caller: TransactionSigner<TAccountCaller>;
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  message: ValidateMessageInstructionDataArgs['message'];
};

export async function getValidateMessageInstructionAsync<
  TAccountIncomingMessagePda extends string,
  TAccountCaller extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: ValidateMessageAsyncInput<
    TAccountIncomingMessagePda,
    TAccountCaller,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  ValidateMessageInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountCaller,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    caller: { value: input.caller ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.incomingMessagePda.value) {
    accounts.incomingMessagePda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            105, 110, 99, 111, 109, 105, 110, 103, 32, 109, 101, 115, 115, 97,
            103, 101,
          ])
        ),
        getMessageEncoder().encode(expectSome(args.message)),
      ],
    });
  }
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getValidateMessageInstructionDataEncoder().encode(
      args as ValidateMessageInstructionDataArgs
    ),
    programAddress,
  } as ValidateMessageInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountCaller,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ValidateMessageInput<
  TAccountIncomingMessagePda extends string = string,
  TAccountCaller extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  incomingMessagePda: Address<TAccountIncomingMessagePda>;
  /** The caller must be a PDA derived from the destination program using command_id and signing_pda_bump */
  caller: TransactionSigner<TAccountCaller>;
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
  message: ValidateMessageInstructionDataArgs['message'];
};

export function getValidateMessageInstruction<
  TAccountIncomingMessagePda extends string,
  TAccountCaller extends string,
  TAccountGatewayRootPda extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: ValidateMessageInput<
    TAccountIncomingMessagePda,
    TAccountCaller,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ValidateMessageInstruction<
  TProgramAddress,
  TAccountIncomingMessagePda,
  TAccountCaller,
  TAccountGatewayRootPda,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    incomingMessagePda: {
      value: input.incomingMessagePda ?? null,
      isWritable: true,
    },
    caller: { value: input.caller ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.incomingMessagePda),
      getAccountMeta(accounts.caller),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getValidateMessageInstructionDataEncoder().encode(
      args as ValidateMessageInstructionDataArgs
    ),
    programAddress,
  } as ValidateMessageInstruction<
    TProgramAddress,
    TAccountIncomingMessagePda,
    TAccountCaller,
    TAccountGatewayRootPda,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedValidateMessageInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    incomingMessagePda: TAccountMetas[0];
    /** The caller must be a PDA derived from the destination program using command_id and signing_pda_bump */
    caller: TAccountMetas[1];
    gatewayRootPda: TAccountMetas[2];
    eventAuthority: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: ValidateMessageInstructionData;
};

export function parseValidateMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedValidateMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      incomingMessagePda: getNextAccount(),
      caller: getNextAccount(),
      gatewayRootPda: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getValidateMessageInstructionDataDecoder().decode(instruction.data),
  };
}
