/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from 'gill';
import { AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const TRANSFER_OPERATORSHIP_DISCRIMINATOR = new Uint8Array([
  17, 238, 86, 208, 233, 122, 195, 186,
]);

export function getTransferOperatorshipDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    TRANSFER_OPERATORSHIP_DISCRIMINATOR
  );
}

export type TransferOperatorshipInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountOperatorOrUpgradeAuthority extends
    | string
    | AccountMeta<string> = string,
  TAccountProgramData extends string | AccountMeta<string> = string,
  TAccountNewOperator extends string | AccountMeta<string> = string,
  TAccountEventAuthority extends string | AccountMeta<string> = string,
  TAccountProgram extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountGatewayRootPda extends string
        ? WritableAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountOperatorOrUpgradeAuthority extends string
        ? ReadonlySignerAccount<TAccountOperatorOrUpgradeAuthority> &
            AccountSignerMeta<TAccountOperatorOrUpgradeAuthority>
        : TAccountOperatorOrUpgradeAuthority,
      TAccountProgramData extends string
        ? ReadonlyAccount<TAccountProgramData>
        : TAccountProgramData,
      TAccountNewOperator extends string
        ? ReadonlyAccount<TAccountNewOperator>
        : TAccountNewOperator,
      TAccountEventAuthority extends string
        ? ReadonlyAccount<TAccountEventAuthority>
        : TAccountEventAuthority,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TransferOperatorshipInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type TransferOperatorshipInstructionDataArgs = {};

export function getTransferOperatorshipInstructionDataEncoder(): FixedSizeEncoder<TransferOperatorshipInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: TRANSFER_OPERATORSHIP_DISCRIMINATOR,
    })
  );
}

export function getTransferOperatorshipInstructionDataDecoder(): FixedSizeDecoder<TransferOperatorshipInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTransferOperatorshipInstructionDataCodec(): FixedSizeCodec<
  TransferOperatorshipInstructionDataArgs,
  TransferOperatorshipInstructionData
> {
  return combineCodec(
    getTransferOperatorshipInstructionDataEncoder(),
    getTransferOperatorshipInstructionDataDecoder()
  );
}

export type TransferOperatorshipAsyncInput<
  TAccountGatewayRootPda extends string = string,
  TAccountOperatorOrUpgradeAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountNewOperator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  operatorOrUpgradeAuthority: TransactionSigner<TAccountOperatorOrUpgradeAuthority>;
  programData?: Address<TAccountProgramData>;
  newOperator: Address<TAccountNewOperator>;
  eventAuthority?: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export async function getTransferOperatorshipInstructionAsync<
  TAccountGatewayRootPda extends string,
  TAccountOperatorOrUpgradeAuthority extends string,
  TAccountProgramData extends string,
  TAccountNewOperator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: TransferOperatorshipAsyncInput<
    TAccountGatewayRootPda,
    TAccountOperatorOrUpgradeAuthority,
    TAccountProgramData,
    TAccountNewOperator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TransferOperatorshipInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountOperatorOrUpgradeAuthority,
    TAccountProgramData,
    TAccountNewOperator,
    TAccountEventAuthority,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: true },
    operatorOrUpgradeAuthority: {
      value: input.operatorOrUpgradeAuthority ?? null,
      isWritable: false,
    },
    programData: { value: input.programData ?? null, isWritable: false },
    newOperator: { value: input.newOperator ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.programData.value) {
    accounts.programData.value = await getProgramDerivedAddress({
      programAddress:
        'BPFLoaderUpgradeab1e11111111111111111111111' as Address<'BPFLoaderUpgradeab1e11111111111111111111111'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            44, 196, 198, 56, 81, 51, 80, 4, 205, 15, 198, 91, 216, 212, 66,
            141, 4, 85, 174, 109, 195, 197, 108, 22, 65, 17, 69, 38, 103, 158,
            182, 54,
          ])
        ),
      ],
    });
  }
  if (!accounts.eventAuthority.value) {
    accounts.eventAuthority.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.operatorOrUpgradeAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.newOperator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getTransferOperatorshipInstructionDataEncoder().encode({}),
    programAddress,
  } as TransferOperatorshipInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountOperatorOrUpgradeAuthority,
    TAccountProgramData,
    TAccountNewOperator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type TransferOperatorshipInput<
  TAccountGatewayRootPda extends string = string,
  TAccountOperatorOrUpgradeAuthority extends string = string,
  TAccountProgramData extends string = string,
  TAccountNewOperator extends string = string,
  TAccountEventAuthority extends string = string,
  TAccountProgram extends string = string,
> = {
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  operatorOrUpgradeAuthority: TransactionSigner<TAccountOperatorOrUpgradeAuthority>;
  programData: Address<TAccountProgramData>;
  newOperator: Address<TAccountNewOperator>;
  eventAuthority: Address<TAccountEventAuthority>;
  program: Address<TAccountProgram>;
};

export function getTransferOperatorshipInstruction<
  TAccountGatewayRootPda extends string,
  TAccountOperatorOrUpgradeAuthority extends string,
  TAccountProgramData extends string,
  TAccountNewOperator extends string,
  TAccountEventAuthority extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
>(
  input: TransferOperatorshipInput<
    TAccountGatewayRootPda,
    TAccountOperatorOrUpgradeAuthority,
    TAccountProgramData,
    TAccountNewOperator,
    TAccountEventAuthority,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TransferOperatorshipInstruction<
  TProgramAddress,
  TAccountGatewayRootPda,
  TAccountOperatorOrUpgradeAuthority,
  TAccountProgramData,
  TAccountNewOperator,
  TAccountEventAuthority,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: true },
    operatorOrUpgradeAuthority: {
      value: input.operatorOrUpgradeAuthority ?? null,
      isWritable: false,
    },
    programData: { value: input.programData ?? null, isWritable: false },
    newOperator: { value: input.newOperator ?? null, isWritable: false },
    eventAuthority: { value: input.eventAuthority ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.operatorOrUpgradeAuthority),
      getAccountMeta(accounts.programData),
      getAccountMeta(accounts.newOperator),
      getAccountMeta(accounts.eventAuthority),
      getAccountMeta(accounts.program),
    ],
    data: getTransferOperatorshipInstructionDataEncoder().encode({}),
    programAddress,
  } as TransferOperatorshipInstruction<
    TProgramAddress,
    TAccountGatewayRootPda,
    TAccountOperatorOrUpgradeAuthority,
    TAccountProgramData,
    TAccountNewOperator,
    TAccountEventAuthority,
    TAccountProgram
  >);
}

export type ParsedTransferOperatorshipInstruction<
  TProgram extends string = typeof AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    gatewayRootPda: TAccountMetas[0];
    operatorOrUpgradeAuthority: TAccountMetas[1];
    programData: TAccountMetas[2];
    newOperator: TAccountMetas[3];
    eventAuthority: TAccountMetas[4];
    program: TAccountMetas[5];
  };
  data: TransferOperatorshipInstructionData;
};

export function parseTransferOperatorshipInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTransferOperatorshipInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      gatewayRootPda: getNextAccount(),
      operatorOrUpgradeAuthority: getNextAccount(),
      programData: getNextAccount(),
      newOperator: getNextAccount(),
      eventAuthority: getNextAccount(),
      program: getNextAccount(),
    },
    data: getTransferOperatorshipInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
