/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from 'gill';

export type PublicKey =
  | { __kind: 'Secp256k1'; fields: readonly [ReadonlyUint8Array] }
  | { __kind: 'Ed25519'; fields: readonly [ReadonlyUint8Array] };

export type PublicKeyArgs = PublicKey;

export function getPublicKeyEncoder(): Encoder<PublicKeyArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Secp256k1',
      getStructEncoder([
        ['fields', getTupleEncoder([fixEncoderSize(getBytesEncoder(), 33)])],
      ]),
    ],
    [
      'Ed25519',
      getStructEncoder([
        ['fields', getTupleEncoder([fixEncoderSize(getBytesEncoder(), 32)])],
      ]),
    ],
  ]);
}

export function getPublicKeyDecoder(): Decoder<PublicKey> {
  return getDiscriminatedUnionDecoder([
    [
      'Secp256k1',
      getStructDecoder([
        ['fields', getTupleDecoder([fixDecoderSize(getBytesDecoder(), 33)])],
      ]),
    ],
    [
      'Ed25519',
      getStructDecoder([
        ['fields', getTupleDecoder([fixDecoderSize(getBytesDecoder(), 32)])],
      ]),
    ],
  ]);
}

export function getPublicKeyCodec(): Codec<PublicKeyArgs, PublicKey> {
  return combineCodec(getPublicKeyEncoder(), getPublicKeyDecoder());
}

// Data Enum Helpers.
export function publicKey(
  kind: 'Secp256k1',
  data: GetDiscriminatedUnionVariantContent<
    PublicKeyArgs,
    '__kind',
    'Secp256k1'
  >['fields']
): GetDiscriminatedUnionVariant<PublicKeyArgs, '__kind', 'Secp256k1'>;
export function publicKey(
  kind: 'Ed25519',
  data: GetDiscriminatedUnionVariantContent<
    PublicKeyArgs,
    '__kind',
    'Ed25519'
  >['fields']
): GetDiscriminatedUnionVariant<PublicKeyArgs, '__kind', 'Ed25519'>;
export function publicKey<K extends PublicKeyArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPublicKey<K extends PublicKey['__kind']>(
  kind: K,
  value: PublicKey
): value is PublicKey & { __kind: K } {
  return value.__kind === kind;
}
