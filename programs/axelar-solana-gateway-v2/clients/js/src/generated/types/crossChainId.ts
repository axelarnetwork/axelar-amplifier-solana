/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
} from 'gill';

/**
 * Identifies a specific blockchain and its unique identifier within that
 * chain.
 */
export type CrossChainId = {
  /** The name or identifier of the source blockchain. */
  chain: string;
  /** A unique identifier within the specified blockchain. */
  id: string;
};

export type CrossChainIdArgs = CrossChainId;

export function getCrossChainIdEncoder(): Encoder<CrossChainIdArgs> {
  return getStructEncoder([
    ['chain', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['id', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
  ]);
}

export function getCrossChainIdDecoder(): Decoder<CrossChainId> {
  return getStructDecoder([
    ['chain', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['id', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getCrossChainIdCodec(): Codec<CrossChainIdArgs, CrossChainId> {
  return combineCodec(getCrossChainIdEncoder(), getCrossChainIdDecoder());
}
