/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from 'gill';

/** Represents an initial verifier set with its hash and PDA */
export type InitialVerifierSet = {
  /** The hash of the verifier set */
  hash: ReadonlyUint8Array;
  /** The PDA for the verifier set tracker */
  pda: Address;
};

export type InitialVerifierSetArgs = InitialVerifierSet;

export function getInitialVerifierSetEncoder(): FixedSizeEncoder<InitialVerifierSetArgs> {
  return getStructEncoder([
    ['hash', fixEncoderSize(getBytesEncoder(), 32)],
    ['pda', getAddressEncoder()],
  ]);
}

export function getInitialVerifierSetDecoder(): FixedSizeDecoder<InitialVerifierSet> {
  return getStructDecoder([
    ['hash', fixDecoderSize(getBytesDecoder(), 32)],
    ['pda', getAddressDecoder()],
  ]);
}

export function getInitialVerifierSetCodec(): FixedSizeCodec<
  InitialVerifierSetArgs,
  InitialVerifierSet
> {
  return combineCodec(
    getInitialVerifierSetEncoder(),
    getInitialVerifierSetDecoder()
  );
}
