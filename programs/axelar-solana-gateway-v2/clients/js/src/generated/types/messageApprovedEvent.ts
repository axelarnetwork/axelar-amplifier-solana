/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from 'gill';

export type MessageApprovedEvent = {
  commandId: ReadonlyUint8Array;
  destinationAddress: Address;
  payloadHash: ReadonlyUint8Array;
  sourceChain: string;
  ccId: string;
  sourceAddress: string;
  destinationChain: string;
};

export type MessageApprovedEventArgs = MessageApprovedEvent;

export function getMessageApprovedEventEncoder(): Encoder<MessageApprovedEventArgs> {
  return getStructEncoder([
    ['commandId', fixEncoderSize(getBytesEncoder(), 32)],
    ['destinationAddress', getAddressEncoder()],
    ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
    ['sourceChain', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['ccId', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ['sourceAddress', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    [
      'destinationChain',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
  ]);
}

export function getMessageApprovedEventDecoder(): Decoder<MessageApprovedEvent> {
  return getStructDecoder([
    ['commandId', fixDecoderSize(getBytesDecoder(), 32)],
    ['destinationAddress', getAddressDecoder()],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['sourceChain', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['ccId', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['sourceAddress', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
  ]);
}

export function getMessageApprovedEventCodec(): Codec<
  MessageApprovedEventArgs,
  MessageApprovedEvent
> {
  return combineCodec(
    getMessageApprovedEventEncoder(),
    getMessageApprovedEventDecoder()
  );
}
