/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getCrossChainIdDecoder,
  getCrossChainIdEncoder,
  type CrossChainId,
  type CrossChainIdArgs,
} from '.';

/** Represents a message intended for cross-chain communication. */
export type Message = {
  /** The cross-chain identifier of the message */
  ccId: CrossChainId;
  /** The source address from which the message originates. */
  sourceAddress: string;
  /** The destination blockchain where the message is intended to be sent. */
  destinationChain: string;
  /** The destination address on the target blockchain. */
  destinationAddress: string;
  /** A 32-byte hash of the message payload, ensuring data integrity. */
  payloadHash: ReadonlyUint8Array;
};

export type MessageArgs = {
  /** The cross-chain identifier of the message */
  ccId: CrossChainIdArgs;
  /** The source address from which the message originates. */
  sourceAddress: string;
  /** The destination blockchain where the message is intended to be sent. */
  destinationChain: string;
  /** The destination address on the target blockchain. */
  destinationAddress: string;
  /** A 32-byte hash of the message payload, ensuring data integrity. */
  payloadHash: ReadonlyUint8Array;
};

export function getMessageEncoder(): Encoder<MessageArgs> {
  return getStructEncoder([
    ['ccId', getCrossChainIdEncoder()],
    ['sourceAddress', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    [
      'destinationChain',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    [
      'destinationAddress',
      addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
    ],
    ['payloadHash', fixEncoderSize(getBytesEncoder(), 32)],
  ]);
}

export function getMessageDecoder(): Decoder<Message> {
  return getStructDecoder([
    ['ccId', getCrossChainIdDecoder()],
    ['sourceAddress', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['payloadHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getMessageCodec(): Codec<MessageArgs, Message> {
  return combineCodec(getMessageEncoder(), getMessageDecoder());
}
