/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from 'gill';
import { getU128Decoder, getU128Encoder, type U128, type U128Args } from '.';

/** Controls the signature verification session for a given payload. */
export type SignatureVerification = {
  /**
   * Accumulated signer threshold required to validate the payload.
   *
   * Is incremented on each successful verification.
   *
   * Set to [`U128::MAX`] once the accumulated threshold is greater than or
   * equal the current verifier set threshold.
   */
  accumulatedThreshold: U128;
  /**
   * A bit field used to track which signatures have been verified.
   *
   * Initially, all bits are set to zero. When a signature is verified, its
   * corresponding bit is flipped to one. This prevents the same signature
   * from being verified more than once, avoiding deliberate attempts to
   * decrement the remaining threshold.
   *
   * Currently supports 256 slots. If the signer set maximum size needs to be
   * increased in the future, this value must change to make room for
   * them.
   */
  signatureSlots: ReadonlyUint8Array;
  /**
   * Upon the first successful signature validation, we set the hash of the
   * signing verifier set.
   * This data is later used when rotating signers to figure out which
   * verifier set was the one that actually performed the validation.
   */
  signingVerifierSetHash: ReadonlyUint8Array;
};

export type SignatureVerificationArgs = {
  /**
   * Accumulated signer threshold required to validate the payload.
   *
   * Is incremented on each successful verification.
   *
   * Set to [`U128::MAX`] once the accumulated threshold is greater than or
   * equal the current verifier set threshold.
   */
  accumulatedThreshold: U128Args;
  /**
   * A bit field used to track which signatures have been verified.
   *
   * Initially, all bits are set to zero. When a signature is verified, its
   * corresponding bit is flipped to one. This prevents the same signature
   * from being verified more than once, avoiding deliberate attempts to
   * decrement the remaining threshold.
   *
   * Currently supports 256 slots. If the signer set maximum size needs to be
   * increased in the future, this value must change to make room for
   * them.
   */
  signatureSlots: ReadonlyUint8Array;
  /**
   * Upon the first successful signature validation, we set the hash of the
   * signing verifier set.
   * This data is later used when rotating signers to figure out which
   * verifier set was the one that actually performed the validation.
   */
  signingVerifierSetHash: ReadonlyUint8Array;
};

export function getSignatureVerificationEncoder(): FixedSizeEncoder<SignatureVerificationArgs> {
  return getStructEncoder([
    ['accumulatedThreshold', getU128Encoder()],
    ['signatureSlots', fixEncoderSize(getBytesEncoder(), 32)],
    ['signingVerifierSetHash', fixEncoderSize(getBytesEncoder(), 32)],
  ]);
}

export function getSignatureVerificationDecoder(): FixedSizeDecoder<SignatureVerification> {
  return getStructDecoder([
    ['accumulatedThreshold', getU128Decoder()],
    ['signatureSlots', fixDecoderSize(getBytesDecoder(), 32)],
    ['signingVerifierSetHash', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getSignatureVerificationCodec(): FixedSizeCodec<
  SignatureVerificationArgs,
  SignatureVerification
> {
  return combineCodec(
    getSignatureVerificationEncoder(),
    getSignatureVerificationDecoder()
  );
}
