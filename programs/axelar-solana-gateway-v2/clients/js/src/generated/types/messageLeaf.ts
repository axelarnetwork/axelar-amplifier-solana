/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from 'gill';
import {
  getMessageDecoder,
  getMessageEncoder,
  type Message,
  type MessageArgs,
} from '.';

export type MessageLeaf = {
  /** The message contained within this leaf node. */
  message: Message;
  /** The position of this leaf within the Merkle tree. */
  position: number;
  /** The total number of leaves in the Merkle tree. */
  setSize: number;
  /**
   * A domain separator used to ensure the uniqueness of hashes across
   * different contexts.
   */
  domainSeparator: ReadonlyUint8Array;
};

export type MessageLeafArgs = {
  /** The message contained within this leaf node. */
  message: MessageArgs;
  /** The position of this leaf within the Merkle tree. */
  position: number;
  /** The total number of leaves in the Merkle tree. */
  setSize: number;
  /**
   * A domain separator used to ensure the uniqueness of hashes across
   * different contexts.
   */
  domainSeparator: ReadonlyUint8Array;
};

export function getMessageLeafEncoder(): Encoder<MessageLeafArgs> {
  return getStructEncoder([
    ['message', getMessageEncoder()],
    ['position', getU16Encoder()],
    ['setSize', getU16Encoder()],
    ['domainSeparator', fixEncoderSize(getBytesEncoder(), 32)],
  ]);
}

export function getMessageLeafDecoder(): Decoder<MessageLeaf> {
  return getStructDecoder([
    ['message', getMessageDecoder()],
    ['position', getU16Decoder()],
    ['setSize', getU16Decoder()],
    ['domainSeparator', fixDecoderSize(getBytesDecoder(), 32)],
  ]);
}

export function getMessageLeafCodec(): Codec<MessageLeafArgs, MessageLeaf> {
  return combineCodec(getMessageLeafEncoder(), getMessageLeafDecoder());
}
