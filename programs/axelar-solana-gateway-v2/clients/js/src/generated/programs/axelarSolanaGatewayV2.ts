/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedApproveMessageInstruction,
  type ParsedCallContractInstruction,
  type ParsedInitializeConfigInstruction,
  type ParsedInitializePayloadVerificationSessionInstruction,
  type ParsedRotateSignersInstruction,
  type ParsedTransferOperatorshipInstruction,
  type ParsedValidateMessageInstruction,
  type ParsedVerifySignatureInstruction,
} from '../instructions';

export const AXELAR_SOLANA_GATEWAY_V2_PROGRAM_ADDRESS =
  '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>;

export enum AxelarSolanaGatewayV2Account {
  GatewayConfig,
  IncomingMessage,
  SignatureVerificationSessionData,
  VerifierSetTracker,
}

export function identifyAxelarSolanaGatewayV2Account(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGatewayV2Account {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 247, 66, 27, 24, 1, 48, 176])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Account.GatewayConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([30, 144, 125, 111, 211, 223, 91, 170])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Account.IncomingMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([77, 45, 59, 53, 208, 86, 239, 109])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Account.SignatureVerificationSessionData;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 8, 163, 157, 229, 233, 20, 181])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Account.VerifierSetTracker;
  }
  throw new Error(
    'The provided account could not be identified as a axelarSolanaGatewayV2 account.'
  );
}

export enum AxelarSolanaGatewayV2Instruction {
  ApproveMessage,
  CallContract,
  InitializeConfig,
  InitializePayloadVerificationSession,
  RotateSigners,
  TransferOperatorship,
  ValidateMessage,
  VerifySignature,
}

export function identifyAxelarSolanaGatewayV2Instruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AxelarSolanaGatewayV2Instruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([65, 154, 132, 135, 105, 5, 173, 21])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.ApproveMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([177, 150, 85, 130, 129, 92, 188, 211])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.CallContract;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([208, 127, 21, 1, 194, 190, 196, 70])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.InitializeConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 201, 241, 74, 8, 237, 63, 231])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.InitializePayloadVerificationSession;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([122, 196, 231, 159, 163, 24, 207, 166])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.RotateSigners;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([17, 238, 86, 208, 233, 122, 195, 186])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.TransferOperatorship;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([237, 229, 200, 193, 7, 229, 212, 127])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.ValidateMessage;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([91, 139, 24, 69, 251, 162, 245, 112])
      ),
      0
    )
  ) {
    return AxelarSolanaGatewayV2Instruction.VerifySignature;
  }
  throw new Error(
    'The provided instruction could not be identified as a axelarSolanaGatewayV2 instruction.'
  );
}

export type ParsedAxelarSolanaGatewayV2Instruction<
  TProgram extends string = '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd',
> =
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.ApproveMessage;
    } & ParsedApproveMessageInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.CallContract;
    } & ParsedCallContractInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.InitializeConfig;
    } & ParsedInitializeConfigInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.InitializePayloadVerificationSession;
    } & ParsedInitializePayloadVerificationSessionInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.RotateSigners;
    } & ParsedRotateSignersInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.TransferOperatorship;
    } & ParsedTransferOperatorshipInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.ValidateMessage;
    } & ParsedValidateMessageInstruction<TProgram>)
  | ({
      instructionType: AxelarSolanaGatewayV2Instruction.VerifySignature;
    } & ParsedVerifySignatureInstruction<TProgram>);
