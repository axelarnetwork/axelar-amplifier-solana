/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from 'gill';
import { MEMO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EMIT_MEMO_DISCRIMINATOR = new Uint8Array([
  157, 222, 212, 21, 59, 139, 46, 222,
]);

export function getEmitMemoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(EMIT_MEMO_DISCRIMINATOR);
}

export type EmitMemoInstruction<
  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,
  TAccountSomeAccount extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSomeAccount extends string
        ? ReadonlyAccount<TAccountSomeAccount>
        : TAccountSomeAccount,
      ...TRemainingAccounts,
    ]
  >;

export type EmitMemoInstructionData = {
  discriminator: ReadonlyUint8Array;
  message: string;
};

export type EmitMemoInstructionDataArgs = { message: string };

export function getEmitMemoInstructionDataEncoder(): Encoder<EmitMemoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['message', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: EMIT_MEMO_DISCRIMINATOR })
  );
}

export function getEmitMemoInstructionDataDecoder(): Decoder<EmitMemoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['message', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getEmitMemoInstructionDataCodec(): Codec<
  EmitMemoInstructionDataArgs,
  EmitMemoInstructionData
> {
  return combineCodec(
    getEmitMemoInstructionDataEncoder(),
    getEmitMemoInstructionDataDecoder()
  );
}

export type EmitMemoInput<TAccountSomeAccount extends string = string> = {
  someAccount: Address<TAccountSomeAccount>;
  message: EmitMemoInstructionDataArgs['message'];
};

export function getEmitMemoInstruction<
  TAccountSomeAccount extends string,
  TProgramAddress extends Address = typeof MEMO_PROGRAM_ADDRESS,
>(
  input: EmitMemoInput<TAccountSomeAccount>,
  config?: { programAddress?: TProgramAddress }
): EmitMemoInstruction<TProgramAddress, TAccountSomeAccount> {
  // Program address.
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    someAccount: { value: input.someAccount ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.someAccount)],
    data: getEmitMemoInstructionDataEncoder().encode(
      args as EmitMemoInstructionDataArgs
    ),
    programAddress,
  } as EmitMemoInstruction<TProgramAddress, TAccountSomeAccount>);
}

export type ParsedEmitMemoInstruction<
  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    someAccount: TAccountMetas[0];
  };
  data: EmitMemoInstructionData;
};

export function parseEmitMemoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedEmitMemoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { someAccount: getNextAccount() },
    data: getEmitMemoInstructionDataDecoder().decode(instruction.data),
  };
}
