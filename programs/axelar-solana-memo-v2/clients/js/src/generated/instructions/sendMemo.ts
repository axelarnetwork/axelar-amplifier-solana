/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from 'gill';
import { MEMO_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SEND_MEMO_DISCRIMINATOR = new Uint8Array([
  206, 178, 79, 19, 63, 210, 72, 239,
]);

export function getSendMemoDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(SEND_MEMO_DISCRIMINATOR);
}

export type SendMemoInstruction<
  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,
  TAccountMemoProgram extends
    | string
    | AccountMeta<string> = '8VRxuTLvEWsUcGsA299QQdUPaFuYkV6qkHDC5gtqt3Zc',
  TAccountSigningPda extends string | AccountMeta<string> = string,
  TAccountGatewayRootPda extends string | AccountMeta<string> = string,
  TAccountGatewayEventAuthority extends string | AccountMeta<string> = string,
  TAccountGatewayProgram extends
    | string
    | AccountMeta<string> = '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMemoProgram extends string
        ? ReadonlyAccount<TAccountMemoProgram>
        : TAccountMemoProgram,
      TAccountSigningPda extends string
        ? ReadonlyAccount<TAccountSigningPda>
        : TAccountSigningPda,
      TAccountGatewayRootPda extends string
        ? ReadonlyAccount<TAccountGatewayRootPda>
        : TAccountGatewayRootPda,
      TAccountGatewayEventAuthority extends string
        ? ReadonlyAccount<TAccountGatewayEventAuthority>
        : TAccountGatewayEventAuthority,
      TAccountGatewayProgram extends string
        ? ReadonlyAccount<TAccountGatewayProgram>
        : TAccountGatewayProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SendMemoInstructionData = {
  discriminator: ReadonlyUint8Array;
  destinationChain: string;
  destinationAddress: string;
  memo: string;
};

export type SendMemoInstructionDataArgs = {
  destinationChain: string;
  destinationAddress: string;
  memo: string;
};

export function getSendMemoInstructionDataEncoder(): Encoder<SendMemoInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'destinationChain',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      [
        'destinationAddress',
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()),
      ],
      ['memo', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: SEND_MEMO_DISCRIMINATOR })
  );
}

export function getSendMemoInstructionDataDecoder(): Decoder<SendMemoInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'destinationChain',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    [
      'destinationAddress',
      addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder()),
    ],
    ['memo', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getSendMemoInstructionDataCodec(): Codec<
  SendMemoInstructionDataArgs,
  SendMemoInstructionData
> {
  return combineCodec(
    getSendMemoInstructionDataEncoder(),
    getSendMemoInstructionDataDecoder()
  );
}

export type SendMemoAsyncInput<
  TAccountMemoProgram extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountGatewayEventAuthority extends string = string,
  TAccountGatewayProgram extends string = string,
> = {
  /** Reference to our program */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Our standardized PDA for calling the gateway */
  signingPda?: Address<TAccountSigningPda>;
  /** The gateway configuration PDA */
  gatewayRootPda?: Address<TAccountGatewayRootPda>;
  /** Event authority - derived from gateway program */
  gatewayEventAuthority?: Address<TAccountGatewayEventAuthority>;
  /** Reference to the axelar gateway program */
  gatewayProgram?: Address<TAccountGatewayProgram>;
  destinationChain: SendMemoInstructionDataArgs['destinationChain'];
  destinationAddress: SendMemoInstructionDataArgs['destinationAddress'];
  memo: SendMemoInstructionDataArgs['memo'];
};

export async function getSendMemoInstructionAsync<
  TAccountMemoProgram extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountGatewayEventAuthority extends string,
  TAccountGatewayProgram extends string,
  TProgramAddress extends Address = typeof MEMO_PROGRAM_ADDRESS,
>(
  input: SendMemoAsyncInput<
    TAccountMemoProgram,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountGatewayEventAuthority,
    TAccountGatewayProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SendMemoInstruction<
    TProgramAddress,
    TAccountMemoProgram,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountGatewayEventAuthority,
    TAccountGatewayProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    gatewayEventAuthority: {
      value: input.gatewayEventAuthority ?? null,
      isWritable: false,
    },
    gatewayProgram: { value: input.gatewayProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      '8VRxuTLvEWsUcGsA299QQdUPaFuYkV6qkHDC5gtqt3Zc' as Address<'8VRxuTLvEWsUcGsA299QQdUPaFuYkV6qkHDC5gtqt3Zc'>;
  }
  if (!accounts.signingPda.value) {
    accounts.signingPda.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            103, 116, 119, 45, 99, 97, 108, 108, 45, 99, 111, 110, 116, 114, 97,
            99, 116,
          ])
        ),
      ],
    });
  }
  if (!accounts.gatewayRootPda.value) {
    accounts.gatewayRootPda.value = await getProgramDerivedAddress({
      programAddress:
        '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([103, 97, 116, 101, 119, 97, 121])
        ),
      ],
    });
  }
  if (!accounts.gatewayEventAuthority.value) {
    accounts.gatewayEventAuthority.value = await getProgramDerivedAddress({
      programAddress:
        '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            95, 95, 101, 118, 101, 110, 116, 95, 97, 117, 116, 104, 111, 114,
            105, 116, 121,
          ])
        ),
      ],
    });
  }
  if (!accounts.gatewayProgram.value) {
    accounts.gatewayProgram.value =
      '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.gatewayEventAuthority),
      getAccountMeta(accounts.gatewayProgram),
    ],
    data: getSendMemoInstructionDataEncoder().encode(
      args as SendMemoInstructionDataArgs
    ),
    programAddress,
  } as SendMemoInstruction<
    TProgramAddress,
    TAccountMemoProgram,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountGatewayEventAuthority,
    TAccountGatewayProgram
  >);
}

export type SendMemoInput<
  TAccountMemoProgram extends string = string,
  TAccountSigningPda extends string = string,
  TAccountGatewayRootPda extends string = string,
  TAccountGatewayEventAuthority extends string = string,
  TAccountGatewayProgram extends string = string,
> = {
  /** Reference to our program */
  memoProgram?: Address<TAccountMemoProgram>;
  /** Our standardized PDA for calling the gateway */
  signingPda: Address<TAccountSigningPda>;
  /** The gateway configuration PDA */
  gatewayRootPda: Address<TAccountGatewayRootPda>;
  /** Event authority - derived from gateway program */
  gatewayEventAuthority: Address<TAccountGatewayEventAuthority>;
  /** Reference to the axelar gateway program */
  gatewayProgram?: Address<TAccountGatewayProgram>;
  destinationChain: SendMemoInstructionDataArgs['destinationChain'];
  destinationAddress: SendMemoInstructionDataArgs['destinationAddress'];
  memo: SendMemoInstructionDataArgs['memo'];
};

export function getSendMemoInstruction<
  TAccountMemoProgram extends string,
  TAccountSigningPda extends string,
  TAccountGatewayRootPda extends string,
  TAccountGatewayEventAuthority extends string,
  TAccountGatewayProgram extends string,
  TProgramAddress extends Address = typeof MEMO_PROGRAM_ADDRESS,
>(
  input: SendMemoInput<
    TAccountMemoProgram,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountGatewayEventAuthority,
    TAccountGatewayProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SendMemoInstruction<
  TProgramAddress,
  TAccountMemoProgram,
  TAccountSigningPda,
  TAccountGatewayRootPda,
  TAccountGatewayEventAuthority,
  TAccountGatewayProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? MEMO_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    memoProgram: { value: input.memoProgram ?? null, isWritable: false },
    signingPda: { value: input.signingPda ?? null, isWritable: false },
    gatewayRootPda: { value: input.gatewayRootPda ?? null, isWritable: false },
    gatewayEventAuthority: {
      value: input.gatewayEventAuthority ?? null,
      isWritable: false,
    },
    gatewayProgram: { value: input.gatewayProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.memoProgram.value) {
    accounts.memoProgram.value =
      '8VRxuTLvEWsUcGsA299QQdUPaFuYkV6qkHDC5gtqt3Zc' as Address<'8VRxuTLvEWsUcGsA299QQdUPaFuYkV6qkHDC5gtqt3Zc'>;
  }
  if (!accounts.gatewayProgram.value) {
    accounts.gatewayProgram.value =
      '41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd' as Address<'41ky5cHRCTPEP5c8hnS8Bwco5vnbxe31iKm26rJs3QYd'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.memoProgram),
      getAccountMeta(accounts.signingPda),
      getAccountMeta(accounts.gatewayRootPda),
      getAccountMeta(accounts.gatewayEventAuthority),
      getAccountMeta(accounts.gatewayProgram),
    ],
    data: getSendMemoInstructionDataEncoder().encode(
      args as SendMemoInstructionDataArgs
    ),
    programAddress,
  } as SendMemoInstruction<
    TProgramAddress,
    TAccountMemoProgram,
    TAccountSigningPda,
    TAccountGatewayRootPda,
    TAccountGatewayEventAuthority,
    TAccountGatewayProgram
  >);
}

export type ParsedSendMemoInstruction<
  TProgram extends string = typeof MEMO_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Reference to our program */
    memoProgram: TAccountMetas[0];
    /** Our standardized PDA for calling the gateway */
    signingPda: TAccountMetas[1];
    /** The gateway configuration PDA */
    gatewayRootPda: TAccountMetas[2];
    /** Event authority - derived from gateway program */
    gatewayEventAuthority: TAccountMetas[3];
    /** Reference to the axelar gateway program */
    gatewayProgram: TAccountMetas[4];
  };
  data: SendMemoInstructionData;
};

export function parseSendMemoInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSendMemoInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      memoProgram: getNextAccount(),
      signingPda: getNextAccount(),
      gatewayRootPda: getNextAccount(),
      gatewayEventAuthority: getNextAccount(),
      gatewayProgram: getNextAccount(),
    },
    data: getSendMemoInstructionDataDecoder().decode(instruction.data),
  };
}
